package in.handyman.raven.lib;

import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.TransferFileDirectory;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "TransferFileDirectory"
)
public class TransferFileDirectoryAction implements IActionExecution {
    private final ActionExecutionAudit actionExecutionAudit;

    private final Logger log;

    private final TransferFileDirectory transferFileDirectory;

    private final Marker aMarker;

    public TransferFileDirectoryAction(final ActionExecutionAudit actionExecutionAudit, final Logger log,
                                       final Object transferFileDirectory) {
        this.transferFileDirectory = (TransferFileDirectory) transferFileDirectory;
        this.actionExecutionAudit = actionExecutionAudit;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker("TransferFileDirectory");
    }

    @Override
    public void execute() throws Exception {
        log.info("Copy file from {} to {}  operation has been started", transferFileDirectory.getSource(), transferFileDirectory.getTo());
        Path sourcePath = Paths.get(transferFileDirectory.getSource());
        Path destinationPath = Paths.get(transferFileDirectory.getTo());
        if (Files.exists(sourcePath)) {
            Files.copy(sourcePath, destinationPath);
            if (Files.exists(destinationPath)) {
                Files.copy(sourcePath, destinationPath, StandardCopyOption.REPLACE_EXISTING);
            }
            log.info("Source File copied to Destination has Deleted", sourcePath);
        } else {
            log.info("Source file -{} not exists", sourcePath);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return false;
    }
}
