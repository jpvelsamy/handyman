package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.UserRegistration;
import in.handyman.raven.util.ExceptionUtil;
import in.handyman.raven.util.InstanceUtil;
import okhttp3.*;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "UserRegistration"
)
public class UserRegistrationAction implements IActionExecution {
  private static final MediaType MediaTypeJSON = MediaType
          .parse("application/json; charset=utf-8");
  private final ActionExecutionAudit action;

  private final Logger log;

  private final UserRegistration userRegistration;

  private final Marker aMarker;
  private final ObjectMapper mapper = new ObjectMapper();
  private final String URI;
  private final String appId;
  private final String apiSecret;

  public UserRegistrationAction(final ActionExecutionAudit action, final Logger log,
                                final Object userRegistration) {
    this.userRegistration = (UserRegistration) userRegistration;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" UserRegistration:" + this.userRegistration.getName());
    this.URI = action.getContext().get("gatekeeper.url");
    this.appId = action.getContext().get("gatekeeper.appid");
    this.apiSecret = action.getContext().get("gatekeeper.apisecret");
  }

  @Override
  public void execute() throws Exception {
    log.info(aMarker, "Registration Action for {} has been started" , userRegistration.getName());
    final OkHttpClient httpclient = InstanceUtil.createOkHttpClient();

    final ObjectNode objectNode = mapper.createObjectNode();
    objectNode.put("appId", appId);
    objectNode.put("apiSecret", apiSecret);
    log.info(aMarker, " Input variables id : {}", action.getActionId());

    Request registerRequest = new Request.Builder().url(URI + "api/v1/register")
            .post(RequestBody.create(objectNode.toString(), MediaTypeJSON))
            .build();
    try (Response response = httpclient.newCall(registerRequest).execute()) {
      if (response.isSuccessful()) {
        log.info(aMarker, "User Registered");
      } else
        log.info(aMarker, "User Already Exists ");
    } catch (Exception e) {
      log.error(aMarker, "Error in registering user {} ", ExceptionUtil.toString(e));
      throw new HandymanException("Error in registering user", e, action);
    }
    log.info(aMarker, "Registration Action for {} has been completed" , userRegistration.getName());

  }

  @Override
  public boolean executeIf() throws Exception {
    return userRegistration.getCondition();
  }
}

