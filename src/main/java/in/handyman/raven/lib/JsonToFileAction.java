package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.JsonToFile;
import org.jdbi.v3.core.Jdbi;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.io.FileWriter;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "JsonToFile"
)
public class JsonToFileAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final JsonToFile jsonToFile;
    private final ObjectMapper mapper = new ObjectMapper();

    private final Marker aMarker;

    public JsonToFileAction(final ActionExecutionAudit action, final Logger log,
                            final Object jsonToFile) {
        this.jsonToFile = (JsonToFile) jsonToFile;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" JsonToFile:" + this.jsonToFile.getName());
    }

    @Override
    public void execute() throws Exception {
        log.info(aMarker, "Json toFile Action for {} has been started", jsonToFile.getName());
        final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(jsonToFile.getResourceConn());
        try (FileWriter file = new FileWriter(jsonToFile.getFilePath())) {
            mapper.enable(SerializationFeature.INDENT_OUTPUT);
            JsonNode jsonNode = mapper.readTree(jsonToFile.getJsonSql());
            mapper.writeValue(file, jsonNode);
        } catch (Exception e) {
            log.error(aMarker, "The Exception occurred ", e);
            throw new HandymanException("Failed to execute", e);
        }
        log.info(aMarker, "Json toFile Action for {} has been completed", jsonToFile.getName());
    }

    @Override
    public boolean executeIf() throws Exception {
        return jsonToFile.getCondition();
    }
}
