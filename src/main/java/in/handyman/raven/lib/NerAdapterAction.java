package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.NerAdapter;
import in.handyman.raven.lib.model.neradaptors.NerAdapterConsumerProcess;
import in.handyman.raven.lib.model.neradaptors.NerInputTable;
import in.handyman.raven.lib.model.neradaptors.NerOutputTable;
import in.handyman.raven.util.ExceptionUtil;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "NerAdapter"
)
public class NerAdapterAction implements IActionExecution {
    public static final String COLUMN_LIST = "origin_id, paper_no, group_id, process_id, sor_id, sor_item_id, sor_item_name, question, answer,weight, created_user_id, tenant_id, created_on, word_score, char_score, validator_score_allowed, validator_score_negative, confidence_score, validation_name, b_box,status,stage,message,vqa_score,question_id,synonym_id,model_name,model_version";
    private final ActionExecutionAudit action;
    private final Logger log;
    private final NerAdapter nerAdapter;
    private final Marker aMarker;


    public NerAdapterAction(final ActionExecutionAudit action, final Logger log,
                            final Object nerAdapter) {
        this.nerAdapter = (NerAdapter) nerAdapter;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" NerAdapter:" + this.nerAdapter.getName());

    }

    @Override
    public void execute() throws Exception {

        try {
            log.info(aMarker, "ner adapter Action has been started {}", nerAdapter);

            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(nerAdapter.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            // build insert prepare statement with output table columns
            final String insertQuery = "INSERT INTO " + nerAdapter.getResultTable() +
                    "(" + COLUMN_LIST + ")" +
                    " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?,?, ?, ?, ?, ?, ?,?,?,?  ,? ,?,?,?,?);";
            log.info(aMarker, "ner adapter Insert query {}", insertQuery);

            //3. initiate copro processor and copro urls
            final List<URL> urls = Optional.ofNullable(action.getContext().get("copro.text-validation.url")).map(s -> Arrays.stream(s.split(",")).map(url -> {
                try {
                    return new URL(url);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL {}", url, e);
                    throw new HandymanException("Error in processing the URL", e, action);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());
            log.info(aMarker, "ner adapter copro urls {}", urls);

            final CoproProcessor<NerInputTable, NerOutputTable> coproProcessor =
                    new CoproProcessor<>(new LinkedBlockingQueue<>(),
                            NerOutputTable.class,
                            NerInputTable.class,
                            jdbi, log,
                            new NerInputTable(), urls, action);

            log.info(aMarker, "ner adapter copro coproProcessor initialization  {}", coproProcessor);

            //4. call the method start producer from coproprocessor
            coproProcessor.startProducer(nerAdapter.getResultSet(), Integer.valueOf(action.getContext().get("read.batch.size")));
            log.info(aMarker, "ner adapter copro coproProcessor startProducer called read batch size {}", action.getContext().get("read.batch.size"));
            Thread.sleep(1000);
            coproProcessor.startConsumer(insertQuery, Integer.valueOf(action.getContext().get("ner.consumer.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")),
                    new NerAdapterConsumerProcess(log, aMarker, action));
            log.info(aMarker, "ner adapter copro coproProcessor startConsumer called consumer count {} write batch count {} ", Integer.valueOf(action.getContext().get("ner.consumer.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")));


        } catch (Exception ex) {
            log.error(aMarker, "Error in execute method for ner adapter {} ", ExceptionUtil.toString(ex));
            throw new HandymanException("Error in execute method for ner adapter", ex, action);

        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return nerAdapter.getCondition();
    }


}
