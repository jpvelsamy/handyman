package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.adapters.AlphaAdapter;
import in.handyman.raven.lib.adapters.NameAdapter;
import in.handyman.raven.lib.interfaces.AdapterInterface;
import in.handyman.raven.lib.model.Nervalidator;
import in.handyman.raven.lib.model.Validator;
import in.handyman.raven.util.ExceptionUtil;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "Nervalidator"
)
public class NervalidatorAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;
    private final String URI;
    private final Nervalidator nervalidator;
    private final Marker aMarker;
    AdapterInterface alphaAdapter;
    AdapterInterface nameAdapter;
    final String NAME_NUMBER_REGEX = "^(.+?)\\s*(\\d+)$";


    public NervalidatorAction(final ActionExecutionAudit action, final Logger log,
                              final Object nervalidator) {
        this.nervalidator = (Nervalidator) nervalidator;
        this.action = action;
        this.log = log;
        this.URI = action.getContext().get("copro.text-validation.url");
        this.alphaAdapter = new AlphaAdapter();
        this.nameAdapter = new NameAdapter();
        this.aMarker = MarkerFactory.getMarker(" Nervalidator:" + this.nervalidator.getName());
    }

    public int getNerScore(Validator adapter, String uri) {
        int confidenceScore = 0;
        try {
            boolean alphaValidator = alphaAdapter.getValidationModel(adapter.getInputValue(), adapter.getAllowedSpecialChar(), action);
            if (alphaValidator) {
                boolean validator = nameAdapter.getValidationModel(adapter.getInputValue(), uri, action);
                confidenceScore = validator ? adapter.getThreshold() : 0;
            } else {
                Pattern pattern = Pattern.compile(NAME_NUMBER_REGEX);
                Matcher matcher = pattern.matcher(adapter.getInputValue());
                if (matcher.matches()) {
                    String name = matcher.group(1);
                    boolean validator = nameAdapter.getValidationModel(name, uri, action);
                    confidenceScore = validator ? adapter.getThreshold() : 0;
                }
            }
        } catch (Exception ex) {
            log.error("Error in getting ner score {}", ExceptionUtil.toString(ex));
            throw new HandymanException("Failed to execute", ex, action);
        }
        return confidenceScore;
    }

    @Override
    public void execute() throws Exception {
        try {
            log.info(aMarker, "Ner Validator Count Action for {} has been started", nervalidator.getName());
            AdapterInterface nameAdapter = new NameAdapter();
            boolean validator = nameAdapter.getValidationModel(nervalidator.getInputValue(), URI, action);
            int confidenceScore = validator ? Integer.parseInt(nervalidator.getNerThreshold()) : 0;
            action.getContext().put("validator.score", String.valueOf(confidenceScore));
            log.info(aMarker, "Ner Validator Action for {} has been completed", nervalidator.getName());

        } catch (Exception ex) {
            action.getContext().put(nervalidator.getName().concat(".error"), "true");
            log.error(aMarker, "The Exception occurred {} ", ExceptionUtil.toString(ex));
            throw new HandymanException("Failed to execute", ex, action);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return nervalidator.getCondition();
    }
}
