package in.handyman.raven.lib;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.BlankPageRemover;
import in.handyman.raven.util.InstanceUtil;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.Map;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "BlankPageRemover"
)
public class BlankPageRemoverAction implements IActionExecution {
    private static final MediaType MediaTypeJSON = MediaType
            .parse("application/json; charset=utf-8");
    private final ActionExecutionAudit action;
    private final Logger log;
    private final BlankPageRemover blankPageRemover;
    private final ObjectMapper mapper = new ObjectMapper();
    private final String URI;

    private final Marker aMarker;

    public BlankPageRemoverAction(final ActionExecutionAudit action, final Logger log,
                                  final Object blankPageRemover) {
        this.blankPageRemover = (BlankPageRemover) blankPageRemover;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" BlankPageRemover:" + this.blankPageRemover.getName());
        this.URI = action.getContext().get("copro.blank-page-remover.url");

    }

    @Override
    public void execute() throws Exception {
        log.info(aMarker, "<-------Blank Page Remover Action for {} has been started------->" + blankPageRemover.getName());
        final OkHttpClient httpclient = InstanceUtil.createOkHttpClient();

        final ObjectNode objectNode = mapper.createObjectNode();
        objectNode.put("inputFilePath", blankPageRemover.getFilePath());
        objectNode.put("outputDir", blankPageRemover.getOutputDir());
        log.info(aMarker, " Input variables id : {}", action.getActionId());

        // build a request
        Request request = new Request.Builder().url(URI)
                .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();

        String name = blankPageRemover.getName();
        log.info(aMarker, "The Request Details : {}", request);
        try (Response response = httpclient.newCall(request).execute()) {
            String responseBody = response.body().string();
            if (response.isSuccessful()) {
                log.info(aMarker, "The Successful Response for {} --> {}", name, responseBody);
                Map<String, String> responseMap = mapper.readValue(responseBody, new TypeReference<>() {
                });
                responseMap.forEach((s, s2) -> action.getContext().put(String.format("%s.%s", blankPageRemover.getName(), s), s2));
            } else {
                log.info(aMarker, "The Failure Response {} --> {}", name, responseBody);
                action.getContext().put(name.concat(".error"), "true");
                action.getContext().put(name.concat(".errorMessage"), responseBody);
            }
            action.getContext().put(name + ".isSuccessful", String.valueOf(response.isSuccessful()));
        } catch (Exception e) {
            log.error(aMarker, "The Exception occurred ", e);
            action.getContext().put(name + ".isSuccessful", "false");
            throw new HandymanException("Failed to execute", e);
        }
        log.info(aMarker, "<-------Blank Page Remover Action for {} has been completed------->" + blankPageRemover.getName());
    }

    @Override
    public boolean executeIf() throws Exception {
        return blankPageRemover.getCondition();
    }
}
