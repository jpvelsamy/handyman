package in.handyman.raven.lib;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.BlankPageRemover;
import in.handyman.raven.util.ExceptionUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import okhttp3.*;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.*;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "BlankPageRemover"
)
public class BlankPageRemoverAction implements IActionExecution {
    private static final MediaType MediaTypeJSON = MediaType
            .parse("application/json; charset=utf-8");
    private final ActionExecutionAudit action;
    private final Logger log;
    private final BlankPageRemover blankPageRemover;
    private final ObjectMapper mapper = new ObjectMapper();
    private final String URI;

    private final Marker aMarker;

    public BlankPageRemoverAction(final ActionExecutionAudit action, final Logger log,
                                  final Object blankPageRemover) {
        this.blankPageRemover = (BlankPageRemover) blankPageRemover;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" BlankPageRemover:" + this.blankPageRemover.getName());
        this.URI = action.getContext().get("copro.blank-page-remover.url");

    }

    @Override
    public void execute() throws Exception {
        try {
            log.info(aMarker, " Blank Page Removal Action has been started {}  ", blankPageRemover.getName());

            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(blankPageRemover.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            final String outputDir = Optional.ofNullable(blankPageRemover.getOutputDir()).map(String::valueOf).orElse(null);
            //5. build insert prepare statement with output table columns
            final String insertQuery = "INSERT INTO info.blank_page_removal_" + blankPageRemover.getProcessId() + "(origin_id,group_id,processed_file_path, status,stage,message,created_on) " +
                    " VALUES(?,?,?, ?,?,?,now())";
            log.info(aMarker, "Blank Page Removal Insert query {}", insertQuery);

            //3. initiate copro processor and copro urls
            final List<URL> urls = Optional.ofNullable(action.getContext().get("copro.blank-page-remover.url")).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
                try {
                    return new URL(s1);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL ", e);
                    throw new RuntimeException(e);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());

            final CoproProcessor<BlankPageRemoverAction.BlankPageRemoverInputTable, BlankPageRemoverAction.BlankPageRemoverOutputTable> coproProcessor =
                    new CoproProcessor<>(new LinkedBlockingQueue<>(),
                            BlankPageRemoverAction.BlankPageRemoverOutputTable.class,
                            BlankPageRemoverAction.BlankPageRemoverInputTable.class,
                            jdbi, log,
                            new BlankPageRemoverAction.BlankPageRemoverInputTable(), urls, action);

            //4. call the method start producer from coproprocessor
            coproProcessor.startProducer(blankPageRemover.getQuerySet(), Integer.valueOf(action.getContext().get("read.batch.size")));
            Thread.sleep(1000);
            //8. call the method start consumer from coproprocessor
            coproProcessor.startConsumer(insertQuery, Integer.valueOf(action.getContext().get("blank.page.removal.consumer.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")), new BlankPageRemoverAction.BlankPageRemoverConsumerProcess(log, aMarker, action, outputDir));
            log.info(aMarker, " Blank Page Removal Action has been completed {}  ", blankPageRemover.getName());
        } catch (Throwable t) {
            action.getContext().put(blankPageRemover.getName() + ".isSuccessful", "false");
            log.error(aMarker, "error at blank page removal execute method {}", t);
        }
    }

        //6. write consumer process class which implements CoproProcessor.ConsumerProcess
    public static class BlankPageRemoverConsumerProcess implements CoproProcessor.ConsumerProcess<BlankPageRemoverAction.BlankPageRemoverInputTable, BlankPageRemoverAction.BlankPageRemoverOutputTable> {
        private final Logger log;
        private final Marker aMarker;
        private final ObjectMapper mapper = new ObjectMapper();
        private static final MediaType MediaTypeJSON = MediaType
                .parse("application/json; charset=utf-8");
        private final String outputDir;

        public final ActionExecutionAudit action;
        final OkHttpClient httpclient = new OkHttpClient.Builder()
                .connectTimeout(10, TimeUnit.MINUTES)
                .writeTimeout(10, TimeUnit.MINUTES)
                .readTimeout(10, TimeUnit.MINUTES)
                .build();

        public BlankPageRemoverConsumerProcess(final Logger log, final Marker aMarker, ActionExecutionAudit action, String outputDir) {
            this.log = log;
            this.aMarker = aMarker;
            this.action = action;
            this.outputDir = outputDir;
        }

        //7. overwrite the method process in coproprocessor, write copro api logic inside this method
        @Override
        public List<BlankPageRemoverAction.BlankPageRemoverOutputTable> process(URL endpoint, BlankPageRemoverAction.BlankPageRemoverInputTable entity) throws JsonProcessingException {
            List<BlankPageRemoverAction.BlankPageRemoverOutputTable> parentObj = new ArrayList<>();
            final ObjectNode objectNode = mapper.createObjectNode();
            objectNode.put("inputFilePath", entity.filePath);
            objectNode.put("outputDir", outputDir);
            log.info(aMarker, " Input variables id : {}", action.getActionId());
            Request request = new Request.Builder().url(endpoint)
                    .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();
            log.debug(aMarker, "Request has been build with the parameters \n URI : {} ");
            log.debug(aMarker, "The Request Details: {}", request);
            try (Response response = httpclient.newCall(request).execute()) {
                String responseBody = Objects.requireNonNull(response.body()).string();
                if (response.isSuccessful()) {
                    JSONObject parentResponseObject = new JSONObject(responseBody);
                    parentObj.add(
                            BlankPageRemoverOutputTable
                                    .builder()
                                    .processedFilePath(Optional.ofNullable(parentResponseObject.get("processedFilePath")).map(String::valueOf).orElse(null))
                                    .originId(Optional.ofNullable(entity.getOriginId()).map(String::valueOf).orElse(null))
                                    .groupId(entity.getGroupId())
                                    .status("COMPLETED")
                                    .stage("BLANK_PAGE_REMOVAL")
                                    .message("Blankpage removal finished")
                                    .build());
                }else{
                    parentObj.add(
                            BlankPageRemoverOutputTable
                                    .builder()
                                    .originId(Optional.ofNullable(entity.getOriginId()).map(String::valueOf).orElse(null))
                                    .groupId(entity.getGroupId())
                                    .status("FAILED")
                                    .stage("BLANK_PAGE_REMOVAL")
                                    .message(response.message())
                                    .build());
                    log.info(aMarker, "The Exception occurred in blank page remover ");
                }
            } catch (Exception e) {
                parentObj.add(
                        BlankPageRemoverOutputTable
                                .builder()
                                .originId(Optional.ofNullable(entity.getOriginId()).map(String::valueOf).orElse(null))
                                .groupId(entity.getGroupId())
                                .status("FAILED")
                                .stage("BLANK_PAGE_REMOVAL")
                                .message(ExceptionUtil.toString(e))
                                .build());
                log.error(aMarker, "The Exception occurred in blank page remover ", e);
                //TODO  insert query for error queue
            }
            return parentObj;
        }

    }

    @Override
    public boolean executeIf() throws Exception {
        return blankPageRemover.getCondition();
    }

    //1. input pojo from select query, which implements CoproProcessor.Entity
    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public static class BlankPageRemoverInputTable implements CoproProcessor.Entity {
        private String originId;
        private Integer groupId;
        private String inboundId;
        private Long tenantId;
        private String filePath;
        private String outputDir;
        private String documentId;


        @Override
        public List<Object> getRowData() {
            return null;
        }
    }

    //2. output pojo for table, which implements CoproProcessor.Entity
    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public static class BlankPageRemoverOutputTable implements CoproProcessor.Entity {

        private String originId;
        private Integer groupId;
        private String processedFilePath;
        private String status;
        private String stage;
        private String message;

        @Override
        public List<Object> getRowData() {
            return Stream.of(this.originId, this.groupId, this.processedFilePath,this.status,this.stage,this.message).collect(Collectors.toList());
        }
    }


}