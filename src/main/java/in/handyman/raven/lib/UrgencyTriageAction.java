package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.UrgencyTriage;
import lombok.Builder;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.Objects;
import java.util.concurrent.TimeUnit;
/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "UrgencyTriage"
)
public class UrgencyTriageAction implements IActionExecution {
    private static final MediaType MediaTypeJSON = MediaType.parse("application/json; charset=utf-8");
    private final ActionExecutionAudit action;
    private final Logger log;
    private final UrgencyTriage urgencyTriage;
    private final Marker aMarker;
    private final String URI;
    private final ObjectMapper mapper = new ObjectMapper();
    private String name;

    private String resourceConn;

    private String outputDir;

    private String querySet;

    private Boolean condition = true;

    public UrgencyTriageAction(final ActionExecutionAudit action, final Logger log,
                               final Object urgencyTriage) {
        this.urgencyTriage = (UrgencyTriage) urgencyTriage;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" UrgencyTriage:" + this.urgencyTriage.getName());
        this.URI = action.getContext().get("copro.urgency-triage.url");


    }

    @Override
    public void execute() throws Exception {
        try {
            log.info(aMarker, "Urgency Triage Action for {} has been started" , urgencyTriage.getName());
            final OkHttpClient httpclient = new OkHttpClient.Builder()
                    .connectTimeout(10, TimeUnit.MINUTES)
                    .writeTimeout(10, TimeUnit.MINUTES)
                    .readTimeout(10, TimeUnit.MINUTES).build();

            final ObjectNode objectNode = mapper.createObjectNode();
            objectNode.put("inputFilePath", urgencyTriage.getInputFilePath());
            objectNode.put("binaryClassifierModelFilePath", urgencyTriage.getBinaryClassifierModelFilePath());
            objectNode.put("multiClassifierModelFilePath", urgencyTriage.getMultiClassifierModelFilePath());
            objectNode.put("checkboxClassifierModelFilePath", urgencyTriage.getCheckboxClassifierModelFilePath());
            objectNode.putPOJO("synonyms", urgencyTriage.getSynonyms().split(","));
            objectNode.putPOJO("binaryClassifierLabels", urgencyTriage.getBinaryClassifierLabels().split(","));
            objectNode.putPOJO("multiClassifierLabels", urgencyTriage.getMultiClassifierLabels().split(","));
            objectNode.putPOJO("checkboxClassifierLabels", urgencyTriage.getCheckboxClassifierLabels().split(","));
            objectNode.put("outputDir", urgencyTriage.getOutputDir());
            objectNode.put("binaryImageWidth", urgencyTriage.getBinaryImageWidth());
            objectNode.put("binaryImageHeight", urgencyTriage.getBinaryImageHeight());
            objectNode.put("multiImageWidth", urgencyTriage.getMultiImageWidth());
            objectNode.put("multiImageHeight", urgencyTriage.getMultiImageHeight());
            objectNode.put("checkboxImageWidth", urgencyTriage.getCheckboxImageWidth());
            objectNode.put("checkboxImageHeight", urgencyTriage.getCheckboxImageHeight());


            log.info(aMarker, "Request List {}", objectNode);

            final Request request = new Request.Builder().url(URI)
                    .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();
            log.info(aMarker, "The Request Details : {}", request);
            try (Response response = httpclient.newCall(request).execute()) {
                String responseBody = Objects.requireNonNull(response.body()).string();
                JsonNode actualObj = mapper.readTree(responseBody);
                ObjectNode result = mapper.createObjectNode();
                result.set("file_name", actualObj.get("file_name"));
                result.set("binary_model", actualObj.get("binary_model"));

                // responseBody = responseBody.replaceAll(""\","");
                if (response.isSuccessful()) {
                    action.getContext().put(urgencyTriage.getName().concat(".result"), responseBody);
                    log.info(aMarker, "The Successful Response for {} --> {}", urgencyTriage.getName(), responseBody);
                    action.getContext().put(urgencyTriage.getName().concat(".error"), "false");

                } else {
                    log.error(aMarker, "The Failure Response {} --> {}", urgencyTriage.getName(), responseBody);
                    action.getContext().put(urgencyTriage.getName().concat(".error"), "true");
                    throw new HandymanException(responseBody);
                }
            } catch (Exception e) {
                log.error(aMarker, "The Exception occurred ", e);
                action.getContext().put(urgencyTriage.getName().concat(".error"), "true");
                throw new HandymanException("Failed to execute", e, action);
            }

        } catch (Exception e) {
            action.getContext().put(urgencyTriage.getName().concat(".error"), "true");
            log.error(aMarker, "The Exception occurred ", e);
            throw new HandymanException("Failed to execute", e, action);
        }
        log.info(aMarker, "Urgency Triage Action for {} has been completed" , urgencyTriage.getName());


    }

    @Override
    public boolean executeIf() throws Exception {
        return urgencyTriage.getCondition();
    }
}
