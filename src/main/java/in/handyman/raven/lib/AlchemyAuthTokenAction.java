package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.AlchemyAuthToken;
import in.handyman.raven.util.InstanceUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import okhttp3.*;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.Date;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "AlchemyAuthToken"
)
public class AlchemyAuthTokenAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final AlchemyAuthToken alchemyAuthToken;
    private final ObjectMapper mapper = new ObjectMapper();
    private static final MediaType MediaTypeJSON = MediaType
            .parse("application/json; charset=utf-8");
    private final Marker aMarker;
    private final String URI;
    private final String user;
    private final Long tenantId;
    public static final String ALCHEMY_REFRESH_URL = "alchemy.refresh.url";
    public static final String ALCHEMY_USER = "alchemy.user";
    private static final String TENANT_ID = "tenant_id";

    public AlchemyAuthTokenAction(final ActionExecutionAudit action, final Logger log,
                                  final Object alchemyAuthToken) {
        this.alchemyAuthToken = (AlchemyAuthToken) alchemyAuthToken;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" AlchemyAuthToken:" + this.alchemyAuthToken.getName());
        this.URI = action.getContext().get(ALCHEMY_REFRESH_URL);
        this.user = action.getContext().get(ALCHEMY_USER);
        this.tenantId = Long.valueOf(action.getContext().get(TENANT_ID));
    }

    @Override
    public void execute() throws Exception {
        log.info(aMarker, "Alchemy Auth Token Generation Action for {} has been started", alchemyAuthToken.getName());
        final OkHttpClient httpclient = InstanceUtil.createOkHttpClient();

        final ObjectNode objectNode = mapper.createObjectNode();
        objectNode.put("username", user);
        objectNode.put("tenantId", tenantId);
        log.info(aMarker, " Input variables id : {}", action.getActionId());

        Request request = new Request.Builder().url(URI)
                .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();

        if (log.isInfoEnabled()) {
            log.info(aMarker, "The Request Details url {} , appID {} ", URI, user);
        }

        String name = "alchemyAuth";
        try (Response response = httpclient.newCall(request).execute()) {
            assert response.body() != null;
            String responseBody = response.body().string();
            if (response.isSuccessful()) {
                log.info(aMarker, "The Successful Response for {} --> {}", alchemyAuthToken.getName(), responseBody);
                mapper.registerModule(new JavaTimeModule());
                JsonNode responseNode = mapper.readTree(responseBody);
                JsonNode payload = responseNode.get("payload");
                AlchemyLoginResponse alchemyLoginResponse = mapper.treeToValue(payload, AlchemyLoginResponse.class);
                String authToken = alchemyLoginResponse.getToken();
                System.out.println(authToken);
                action.getContext().put(name.concat(".token"), authToken);
                action.getContext().put(name.concat(".tenantId"), String.valueOf(alchemyLoginResponse.getTenantId()));

            } else {
                log.info(aMarker, "The Failure Response {} --> {}", name, responseBody);
                action.getContext().put(name.concat(".error"), "true");
                action.getContext().put(name.concat(".errorMessage"), responseBody);
            }
            action.getContext().put(name + ".isSuccessful", String.valueOf(response.isSuccessful()));
        } catch (Exception e) {
            log.error(aMarker, "The Exception occurred ", e);
            action.getContext().put(name + ".isSuccessful", "false");
            throw new HandymanException("Failed to execute", e, action);
        }
        log.info(aMarker, "Alchemy Auth Token Generation Action for {} has been completed", alchemyAuthToken.getName());

    }

    @Override
    public boolean executeIf() throws Exception {
        return alchemyAuthToken.getCondition();
    }

    @AllArgsConstructor
    @NoArgsConstructor
    @Data
    @Builder
    public static class AlchemyLoginResponse {
        private String username;
        private Long tenantId;
        private String role;
        private String token;
        private Date expireDatetime;
    }
}
