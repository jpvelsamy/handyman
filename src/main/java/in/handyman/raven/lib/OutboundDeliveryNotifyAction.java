package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.OutboundDeliveryNotify;

import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.util.Objects;

import in.handyman.raven.util.InstanceUtil;
import okhttp3.*;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "OutboundDeliveryNotify"
)
public class OutboundDeliveryNotifyAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;
    private final OutboundDeliveryNotify outboundDeliveryNotify;
    private final MediaType MediaTypeJSON = MediaType.parse("application/json; charset=utf-8");
    final ObjectMapper MAPPER = new ObjectMapper();
    private final Marker aMarker;
    String deliveryNotifyUrl;
    String appId;
    String appKeyId;

    public OutboundDeliveryNotifyAction(final ActionExecutionAudit action, final Logger log,
                                        final Object outboundDeliveryNotify) {
        this.outboundDeliveryNotify = (OutboundDeliveryNotify) outboundDeliveryNotify;
        this.action = action;
        this.log = log;
        this.appId = action.getContext().get("agadia.appId");
        this.appKeyId = action.getContext().get("agadia.appKeyId");
        this.deliveryNotifyUrl = action.getContext().get("doc.delivery.notify.url");
        this.aMarker = MarkerFactory.getMarker(" OutboundDeliveryNotify:" + this.outboundDeliveryNotify.getName());
    }

    @Override
    public void execute() throws Exception {
        try {
            log.info(aMarker, "Outbound Delivery Notification Action has been started {}", outboundDeliveryNotify);
            final OkHttpClient httpclient = InstanceUtil.createOkHttpClient();
            final ObjectNode objectNode = MAPPER.createObjectNode();
            objectNode.put("documentId", outboundDeliveryNotify.getDocumentId());
            objectNode.put("inticsZipUri", outboundDeliveryNotify.getInticsZipUri());
            objectNode.put("checksum", outboundDeliveryNotify.getZipChecksum());
            Request request = new Request.Builder().url(deliveryNotifyUrl)
                    .header("appId", appId)
                    .header("appKeyId", appKeyId)
                    .post(RequestBody.create(objectNode.toString(), MediaTypeJSON))
                    .build();

            log.info(aMarker, "Request for document {} is {}", outboundDeliveryNotify.getDocumentId(),request);
            try (Response response = httpclient.newCall(request).execute()) {
                String responseBody = Objects.requireNonNull(response.body()).string();
                log.info(aMarker, "Response body for document {} is {}", outboundDeliveryNotify.getDocumentId(),responseBody);
                if (response.isSuccessful()) {
                    log.info(aMarker, "Sent response for the document {}", outboundDeliveryNotify.getDocumentId());
                } else {
                    log.error(aMarker, "Error in response {}", responseBody);
                    throw new HandymanException(responseBody);
                }
            } catch (Exception exception) {
                log.error(aMarker, "Error occurred for document id {}", outboundDeliveryNotify.getDocumentId(), exception);
                throw new HandymanException("Error occurred for document", exception, action);
            }
            log.info(aMarker, "Outbound Delivery Notification Action has been completed {}", outboundDeliveryNotify);
        } catch (Exception ex) {
            log.error(aMarker, "Error in execute method for Outbound Delivery Notification Action", ex);
            throw new HandymanException("Error in execute method for Outbound Delivery Notification Action", ex, action);

        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return outboundDeliveryNotify.getCondition();
    }
}
