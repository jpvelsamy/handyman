package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.adapters.NumericAdapter;
import in.handyman.raven.lib.interfaces.AdapterInterface;
import in.handyman.raven.lib.model.Numericvalidator;
import in.handyman.raven.lib.model.Validator;
import in.handyman.raven.util.ExceptionUtil;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "Numericvalidator"
)
public class NumericvalidatorAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final Numericvalidator numericvalidator;

    private final Marker aMarker;
    AdapterInterface numericAdapter;


    public NumericvalidatorAction(final ActionExecutionAudit action, final Logger log,
                                  final Object numericvalidator) {
        this.numericvalidator = (Numericvalidator) numericvalidator;
        this.action = action;
        this.log = log;
        this.numericAdapter = new NumericAdapter();
        this.aMarker = MarkerFactory.getMarker(" Numericvalidator:" + this.numericvalidator.getName());
    }

    public int getNumericScore(Validator adapter) {
        try {
            boolean validator = numericAdapter.getValidationModel(adapter.getInputValue(), adapter.getAllowedSpecialChar(), action);
            return validator ? adapter.getThreshold() : 0;
        } catch (Exception ex) {
            log.error(aMarker, "Error in getting numeric score");
            throw new HandymanException("Failed to execute", ex, action);
        }
    }

    @Override
    public void execute() throws Exception {
        try {

            log.info(aMarker, "Numeric Validator Action for {} has been started" , numericvalidator.getName());
            AdapterInterface numericAdapter = new NumericAdapter();
            boolean validator = numericAdapter.getValidationModel(numericvalidator.getInputValue(), numericvalidator.getAllowedSpecialCharacters(), action);
            int confidenceScore = validator ? Integer.parseInt(numericvalidator.getThresholdValue()) : 0;
            action.getContext().put("validator.score", String.valueOf(confidenceScore));
            log.info(aMarker, "Numeric Validator Action for {} has been completed" , numericvalidator.getName());

        } catch (Exception ex) {
            action.getContext().put(numericvalidator.getName().concat(".error"), "true");
            log.error(aMarker, "The Exception occurred {}", ExceptionUtil.toString(ex));
            throw new HandymanException("Failed to execute", ex, action);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return numericvalidator.getCondition();
    }
}
