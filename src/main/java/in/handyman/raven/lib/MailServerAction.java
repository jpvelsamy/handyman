package in.handyman.raven.lib;

import com.sendgrid.helpers.mail.Mail;
import com.sendgrid.helpers.mail.objects.Attachments;
import com.sendgrid.helpers.mail.objects.Content;
import com.sendgrid.helpers.mail.objects.Email;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.MailServer;

import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

import in.handyman.raven.util.CommonQueryUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.result.ResultIterable;
import org.jdbi.v3.core.statement.Query;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;
import com.sendgrid.*;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
    actionName = "MailServer"
)
public class MailServerAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private final MailServer mailServer;

  private final Marker aMarker;

  public MailServerAction(final ActionExecutionAudit action, final Logger log,
      final Object mailServer) {
    this.mailServer = (MailServer) mailServer;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" MailServer:"+this.mailServer.getName());
  }

  @Override
  public void execute() throws Exception {
    sendEmail();
  }

  @Override
  public boolean executeIf() throws Exception {
    return mailServer.getCondition();
  }

  private void sendEmail() {
    // Initialize SendGrid
    SendGrid sendGrid = new SendGrid("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"); // Replace with your SendGrid API key
    final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(mailServer.getResourceConn());
    List<MailServerQuerySet> extractedQuerySet = extractQuerySet(jdbi);

    extractedQuerySet.forEach(mailServerQuerySet -> {

      Email from = new Email("admin@askjuno.com");

      // Create an Email object for the recipient
      Email to = new Email("sanjeeya.v@zucisystems.com");

      // Create a subject for the email
      String subject = "Invoice Rejection";

      Content content = new Content("text/html",
              "Greetings " + ",<br/><br/>" +
                      "I hope this message finds you well. We appreciate your prompt submission of the invoice " + ". However, after a thorough review, we regret to inform you that we cannot process this invoice due to the following reasons:<br/><br/>" +
                      "To expedite the resolution process, we kindly request that you make the necessary adjustments and promptly submit a revised invoice. Once we receive the corrected invoice, we will proceed with the payment process.<br/><br/>" +
                      "If you have any questions or require further clarification regarding these issues, please do not hesitate to contact our accounts payable department at " + ". We value our partnership with your company and aim to resolve this matter as efficiently as possible.<br/><br/>" +
                      "Thank you for your attention to this matter, and we appreciate your cooperation in resolving these discrepancies promptly.<br/><br/>" +
                      "Sincerely,<br/>" );

      // Create a Mail object
      Mail mail = new Mail(from, subject, to, content);

      Attachments attachments = new Attachments();
      attachments.setFilename("invoice_rejection.pdf"); // Replace with the actual filename
      attachments.setType("application/pdf"); // Set the correct MIME type for PDF
      attachments.setContentId("pdfAttachment"); // Content ID for the attachment
      attachments.setDisposition("attachment");

      // Read the PDF file and set it as content
      try {
        byte[] pdfContent = Files.readAllBytes(Paths.get(mailServerQuerySet.getFileName()));
        attachments.setContent(Base64.getEncoder().encodeToString(pdfContent));
      } catch (IOException e) {
        e.printStackTrace();
      }

      mail.addAttachments(attachments);

      // Send the email
      try {
        Request request = new Request();
        request.setMethod(Method.POST);
        request.setEndpoint("mail/send");
        request.setBody(mail.build());
        Response response = sendGrid.api(request);

        // Check the response and handle any errors
        if (response.getStatusCode() >= 200 && response.getStatusCode() < 300) {
          System.out.println("Email sent successfully.");
        } else {
          System.err.println("Failed to send email. Status code: " + response.getStatusCode());
        }
      } catch (IOException ex) {
        ex.printStackTrace();
      }


    });

  }

  public List<MailServerQuerySet> extractQuerySet(Jdbi jdbi){
    final List<MailServerQuerySet> tableInfos = new ArrayList<>();

    jdbi.useTransaction(handle -> {
      final List<String> formattedQuery = CommonQueryUtil.getFormattedQuery(mailServer.getQuerySet());
      AtomicInteger i = new AtomicInteger(0);
      formattedQuery.forEach(sqlToExecute -> {
        log.info(aMarker, "executing  query {} from index {}", sqlToExecute, i.getAndIncrement());
        Query query = handle.createQuery(sqlToExecute);
        ResultIterable<MailServerQuerySet> resultIterable = query.mapToBean(MailServerQuerySet.class);
        List<MailServerQuerySet> detailList = resultIterable.stream().collect(Collectors.toList());
        tableInfos.addAll(detailList);
        log.info(aMarker, "executed query from index {}", i.get());
      });
    });
    return tableInfos;
  }

  @Data
  @AllArgsConstructor
  @NoArgsConstructor
  @Builder
  public static class MailServerQuerySet {
    private String fileName;
    private String invoiceRejection;

  }
}
