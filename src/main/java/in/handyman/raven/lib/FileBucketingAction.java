package in.handyman.raven.lib;

import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.FileBucketing;

import java.io.File;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;

import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;
import org.apache.pdfbox.pdmodel.PDDocument;

import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "FileBucketing"
)
public class FileBucketingAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final FileBucketing fileBucketing;

    private final Marker aMarker;

    public FileBucketingAction(final ActionExecutionAudit action, final Logger log,
                               final Object fileBucketing) {
        this.fileBucketing = (FileBucketing) fileBucketing;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" FileBucketing:" + this.fileBucketing.getName());
    }

    @Override
    public void execute() throws Exception {
        log.info(aMarker, " File Bucketing Action has been started {}  ", fileBucketing.getName());
//        String inputFolder = getAbsolutePath(fileBucketing.getInputDirectory());
//        String outputFolder = getAbsolutePath(fileBucketing.getOutputDir());
        String inputFolder = fileBucketing.getInputDirectory();
        String outputFolder = fileBucketing.getOutputDir();

        try {
            splitFilesByPage(inputFolder, outputFolder);
            System.out.println("File splitting completed successfully.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void splitFilesByPage(String inputFolder, String outputFolder) throws IOException {
        File folder = new File(inputFolder);

        // Create output folder if it doesn't exist
        File outputDir = new File(outputFolder);
        if (!outputDir.exists()) {
            boolean created = outputDir.mkdirs();
            if (!created) {
                throw new IOException("Failed to create output folder.");
            }
        }

        File[] files = folder.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isFile()) {
                    String fileName = file.getName();
                    String inputFile = inputFolder + "/" + fileName;
                    int pageCount = getNumberOfPages(inputFile);
                    String outputSubFolder;
                    if(pageCount >= Integer.parseInt(action.getContext().get("min-efficient-threshold")) &&
                            pageCount <= Integer.parseInt(action.getContext().get("max-efficient-threshold"))) {
                        outputSubFolder = outputFolder + "/low_effort_high_yield/" + pageCount + "_pages/";
                    } else if (pageCount >= Integer.parseInt(action.getContext().get("min-intensive-threshold"))
                            && pageCount <= Integer.parseInt(action.getContext().get("max-intensive-threshold"))) {
                        outputSubFolder = outputFolder + "/high_effort_high_yield/" + pageCount + "_pages/";
                    } else {
                        outputSubFolder = outputFolder + "/high_effort_low_yield/" + pageCount + "_pages/";
                    }
                    File subFolder = new File(outputSubFolder);
                    if (!subFolder.exists()) {
                        boolean created = subFolder.mkdirs();
                        if (!created) {
                            throw new IOException("Failed to create subfolder for pages.");
                        }
                    }
                    String outputFilePath = outputSubFolder + "/" + file.getName();
                    Files.copy(file.toPath(), new File(outputFilePath).toPath(), StandardCopyOption.REPLACE_EXISTING);
                }
            }
        }
    }

    public static String getAbsolutePath(String relativePath) {
        Path path = Paths.get(relativePath);
        String currentDir = System.getProperty("user.dir");
        Path resolvedPath = Paths.get(currentDir).resolve(path);
        return resolvedPath.toAbsolutePath().toString();
    }

    private static int getNumberOfPages(String inputFile) throws IOException {
        try (PDDocument document = PDDocument.load(new File(inputFile))) {
            return document.getNumberOfPages();
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return fileBucketing.getCondition();
    }
}
