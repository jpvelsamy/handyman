package in.handyman.raven.lib;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.common.collect.Lists;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.DonutImpiraQa;
import in.handyman.raven.util.CommonQueryUtil;
import in.handyman.raven.util.ExceptionUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import okhttp3.*;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.statement.PreparedBatch;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.*;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "DonutImpiraQa"
)
public class DonutImpiraQaAction implements IActionExecution {

  public static final String ATTRIBUTION_URL = "copro.docnutImpira-attribution.url";
  private final ActionExecutionAudit action;

  private final Logger log;

  private final DonutImpiraQa donutImpiraQa;

  private final Marker aMarker;

  private final List<String> nodes;
  private static String httpClientTimeout = new String();

  private final AtomicInteger counter = new AtomicInteger();

  public DonutImpiraQaAction(final ActionExecutionAudit action, final Logger log,
                             final Object donutImpiraQa) {
    this.donutImpiraQa = (DonutImpiraQa) donutImpiraQa;
    this.action = action;
    this.log = log;
    this.nodes = Optional.ofNullable(action.getContext().get(ATTRIBUTION_URL)).map(s -> Arrays.asList(s.split(","))).orElse(Collections.emptyList());
    this.aMarker = MarkerFactory.getMarker(" DonutImpiraQa:"+this.donutImpiraQa.getName());
    httpClientTimeout = action.getContext().get("okhttp.client.timeout");
  }

  @Override
  public void execute() throws Exception {
        try{
    log.info(aMarker, "Donut Impira Attribution Action for {} has been started" , donutImpiraQa.getName());
    final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(donutImpiraQa.getResourceConn());
    final List<DonutImpiraQueryResult> donutImpiraQueryResults = new ArrayList<>();
    jdbi.useTransaction(handle -> {
      final List<String> formattedQuery = CommonQueryUtil.getFormattedQuery(donutImpiraQa.getQuestionSql());
      formattedQuery.forEach(sqlToExecute -> donutImpiraQueryResults.addAll(handle.createQuery(sqlToExecute)
              .mapToBean(DonutImpiraQueryResult.class)
              .stream().collect(Collectors.toList())));
    });

    // Create DDL

            jdbi.useTransaction(handle -> handle.execute("create table if not exists macro." + donutImpiraQa.getResponseAs() + " ( id bigserial not null, file_path text,question text, predicted_attribution_value text NULL,confidence_score float8 NULL, b_box json null, image_dpi int8 null, image_width int8 null, image_height int8 null, extracted_image_unit varchar null, action_id bigint, root_pipeline_id bigint, process_id bigint, created_on timestamp not null default now(), status varchar NULL, stage varchar NULL );"));
            jdbi.useTransaction(handle -> handle.execute("create table if not exists macro." + donutImpiraQa.getResponseAs() + "_error ( id bigserial not null, file_path text,error_message text,  action_id bigint, root_pipeline_id bigint,process_id bigint, created_on timestamp not null default now() );"));

    final List<DocnutImpiraLineItem> docnutImpiraLineItems = new ArrayList<>();

    donutImpiraQueryResults.stream().collect(Collectors.groupingBy(DonutImpiraQueryResult::getFilePath))
            .forEach((s, donutQueryResults1) -> docnutImpiraLineItems.add(DocnutImpiraLineItem.builder()
                    .filePath(s).questions(donutQueryResults1.stream().map(DonutImpiraQueryResult::getQuestion).collect(Collectors.toList()))
                    .build()));

            doProcess(docnutImpiraLineItems);
        } catch (Exception e) {
            log.error(aMarker, "Error in ernie attribution action", e);
            throw new HandymanException("Error in ernie attribution action", e, action);
        }
    }

  private void doProcess(final List<DocnutImpiraLineItem> donutLineItems) {
    final int parallelism;
    if (donutImpiraQa.getForkBatchSize() != null) {
      parallelism = Integer.parseInt(donutImpiraQa.getForkBatchSize());
    } else {
      parallelism = 1;
    }
    final int size = nodes.size();
    try {
      if (size > 0) {
        final int batchSize = donutLineItems.size() / parallelism;
        if (parallelism > 1 && size > 1 && batchSize > 0) {
          final List<List<DocnutImpiraLineItem>> donutLineItemPartitions = Lists.partition(donutLineItems, batchSize);
          final CountDownLatch countDownLatch = new CountDownLatch(donutLineItemPartitions.size());
          final ExecutorService executorService = Executors.newFixedThreadPool(parallelism);
          donutLineItemPartitions.forEach(items -> executorService.submit(() -> {

            try {
              computeProcess(size, items);
            } finally {
              countDownLatch.countDown();
            }

          }));
          countDownLatch.await();

        } else {
          computeProcess(size, donutLineItems);
        }

      }
      action.getContext().put(donutImpiraQa.getResponseAs().concat(".error"), "false");
    } catch (Exception e) {
      log.error(aMarker, "The Failure Response {} --> {}", donutImpiraQa.getResponseAs(), e.getMessage(), e);
      action.getContext().put(donutImpiraQa.getResponseAs().concat(".error"), "true");
    }
  }

  private void computeProcess(final int nodeSize, final List<DocnutImpiraLineItem> docnutImpiraLineItems) {
    final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(donutImpiraQa.getResourceConn());

    docnutImpiraLineItems.forEach(docnutImpiraLineItem -> {
      final String filePath = docnutImpiraLineItem.getFilePath();

      try {
        final List<String> questions = docnutImpiraLineItem.getQuestions();
        final String node = nodes.get(counter.incrementAndGet() % nodeSize);

        log.info(aMarker, "preparing {} for rest api call", questions.size());
        final DonutImpiraResultLineItem donutImpiraResultLineItem = new DocnutImpiraApiCaller(node).compute(filePath, donutImpiraQa.getOutputDir(), questions);
        log.info(aMarker, "completed {}", donutImpiraResultLineItem.attributes.size());

                jdbi.useTransaction(handle -> {
                    final PreparedBatch batch = handle.prepareBatch("INSERT INTO macro." + donutImpiraQa.getResponseAs() + " (process_id,file_path,question, predicted_attribution_value,b_box, image_dpi , image_width , image_height , extracted_image_unit , action_id, root_pipeline_id, confidence_score, status, stage) VALUES(" + action.getPipelineId() + ",:filePath,:question,:predictedAttributionValue, :bBoxes::json, :imageDpi, :imageWidth, :imageHeight , :extractedImageUnit, " + action.getActionId() + "," + action.getRootPipelineId() + ",:confidenceScore, :status, :stage);");

          Lists.partition(donutImpiraResultLineItem.attributes, 100).forEach(resultLineItems -> {
            log.info(aMarker, "inserting into donut_docqa_action {}", resultLineItems.size());
            resultLineItems.forEach(resultLineItem -> {
              batch.bind("filePath", filePath)
                      .bind("question", resultLineItem.question)
                      .bind("predictedAttributionValue", resultLineItem.predictedAttributionValue)
                      .bind("bBoxes", String.valueOf(resultLineItem.bBoxes))
                      .bind("imageDpi", donutImpiraResultLineItem.imageDPI)
                      .bind("imageWidth", donutImpiraResultLineItem.imageWidth)
                      .bind("imageHeight", donutImpiraResultLineItem.imageHeight)
                      .bind("extractedImageUnit", donutImpiraResultLineItem.extractedImageUnit)
                      .bind("confidenceScore",(resultLineItem.score * 100))
                      .bind("status", "COMPLETED")
                      .bind("stage", "VQA_TRANSACTION")
                      .add();

            });
            int[] counts = batch.execute();
            log.info(aMarker, " persisted {} in donut_docqa_action", counts);
          });
        });
      } catch (Exception e) {
        jdbi.useTransaction(handle -> {
          handle.createUpdate("INSERT INTO macro." + donutImpiraQa.getResponseAs() + "_error (file_path,error_message, action_id, root_pipeline_id,process_id) VALUES(:filePath,:errorMessage, " + action.getActionId() + ", " + action.getRootPipelineId() + "," + action.getPipelineId() + ");")
                  .bind("filePath", filePath)
                  .bind("errorMessage", e.getMessage())
                  .execute();
        });
      }

    });

  }

  @Override
  public boolean executeIf() throws Exception {
    return donutImpiraQa.getCondition();
  }

  @AllArgsConstructor
  @NoArgsConstructor
  @Data
  @Builder
  @JsonIgnoreProperties(ignoreUnknown = true)
  public static class DocnutImpiraLineItem {

    private String filePath;
    private List<String> questions;

  }

  @AllArgsConstructor
  @NoArgsConstructor
  @Data
  @Builder
  @JsonIgnoreProperties(ignoreUnknown = true)
  public static class DonutImpiraQueryResult {

    private String filePath;
    private String question;

  }

  @AllArgsConstructor
  @NoArgsConstructor
  @Data
  @Builder
  @JsonIgnoreProperties(ignoreUnknown = true)
  public static class DonutImpiraResultLineItem {
    //private String question;
    //private String predictedAttributionValue;
    //private JsonNode bBoxes;
    private List<DocnutImpiraResult> attributes;
    private double imageDPI;
    private double imageWidth;
    private double imageHeight;
    private String extractedImageUnit;
  }

  @AllArgsConstructor
  @NoArgsConstructor
  @Data
  @Builder
  @JsonIgnoreProperties(ignoreUnknown = true)
  public static class DocnutImpiraResult {
    private String question;
    private String predictedAttributionValue;
    private JsonNode bBoxes;
    private float score;
  }


  @Slf4j
  public static class DocnutImpiraApiCaller {

    private static final MediaType MediaTypeJSON = MediaType.parse("application/json; charset=utf-8");
    private static final ObjectMapper MAPPER = new ObjectMapper();

    private final OkHttpClient httpclient = new OkHttpClient.Builder()
            .connectTimeout(Long.parseLong(httpClientTimeout), TimeUnit.MINUTES)
            .writeTimeout(Long.parseLong(httpClientTimeout), TimeUnit.MINUTES)
            .readTimeout(Long.parseLong(httpClientTimeout), TimeUnit.MINUTES)
            .build();
    private final String node;

    public DocnutImpiraApiCaller(final String node) {
      this.node = node;
    }

    protected DonutImpiraResultLineItem compute(final String inputPath, final String outputDir, final List<String> questions) {
      final ObjectNode objectNode = MAPPER.createObjectNode();
      objectNode.put("inputFilePath", inputPath);
      objectNode.putPOJO("attributes", questions);
//            objectNode.put("outputDir", outputDir);
      final Request request = new Request.Builder().url(node)
              .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();

      if(log.isInfoEnabled()){
        log.info("1. input object node in the consumer process copro url {},   inputFilePath{} ,  attributes {}",node,inputPath,questions);
        log.info("2. Request URL : {} Question List size {}", node, questions.size());

      }
      try (Response response = httpclient.newCall(request).execute()) {
        String responseBody = Objects.requireNonNull(response.body()).string();
        if (response.isSuccessful()) {

          DonutImpiraResultLineItem donutImpiraResultLineItem = MAPPER.readValue(responseBody, new TypeReference<>() {
          });
          log.info("DonutLineItem size {}", donutImpiraResultLineItem.attributes.size());
          return donutImpiraResultLineItem;
        } else {
          throw new HandymanException(responseBody);
        }
      } catch (Exception e) {
        log.error("Failed to execute the rest api call {}", ExceptionUtil.toString(e));
        throw new HandymanException("Failed to execute the rest api call " + node, e);
      }
    }
  }
}
