package in.handyman.raven.lib;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.AuthToken;
import in.handyman.raven.util.InstanceUtil;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.Map;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "AuthToken"
)
public class AuthTokenAction implements IActionExecution {
    private static final MediaType MediaTypeJSON = MediaType
            .parse("application/json; charset=utf-8");
    public static final String GATEKEEPER_URL = "gatekeeper.url";
    public static final String GATEKEEPER_APPID = "gatekeeper.appid";
    private final ActionExecutionAudit action;

    private final Logger log;

    private final AuthToken authToken;

    private final Marker aMarker;
    private final ObjectMapper mapper = new ObjectMapper();
    private final String URI;
    private final String appId;

    public AuthTokenAction(final ActionExecutionAudit action, final Logger log,
                           final Object authToken) {
        this.authToken = (AuthToken) authToken;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" AuthToken:" + this.authToken.getName());
        this.URI = action.getContext().get(GATEKEEPER_URL);
        this.appId = action.getContext().get(GATEKEEPER_APPID);
    }

    @Override
    public void execute() throws Exception {
        log.info(aMarker, "Auth Token Generation Action for {} has been started", authToken.getName());
        final OkHttpClient httpclient = InstanceUtil.createOkHttpClient();

        final ObjectNode objectNode = mapper.createObjectNode();
        objectNode.put("appId", appId);
        objectNode.put("tenantId", Long.valueOf(action.getContext().get("tenant_id")));
        log.info(aMarker, " Input variables id : {}", action.getActionId());

        // build a request
        String gatekeeperUrl = URI + "api/v1/refresh";
        Request request = new Request.Builder().url(gatekeeperUrl)
                .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();

        String name = authToken.getName();
        if (log.isInfoEnabled()) {
            log.info(aMarker, "The Request Details url {} , appID {} ", gatekeeperUrl, appId);
        }


        try (Response response = httpclient.newCall(request).execute()) {
            assert response.body() != null;
            String responseBody = response.body().string();
            if (response.isSuccessful()) {
                log.info(aMarker, "The Successful Response for {} --> {}", name, responseBody);
                Map<String, String> responseMap = mapper.readValue(responseBody, new TypeReference<>() {
                });
                String authToken = responseMap.get("authToken");
                action.getContext().put(name.concat(".token"), authToken);

            } else {
                log.info(aMarker, "The Failure Response {} --> {}", name, responseBody);
                action.getContext().put(name.concat(".error"), "true");
                action.getContext().put(name.concat(".errorMessage"), responseBody);
            }
            action.getContext().put(name + ".isSuccessful", String.valueOf(response.isSuccessful()));
        } catch (Exception e) {
            log.error(aMarker, "The Exception occurred ", e);
            action.getContext().put(name + ".isSuccessful", "false");
            throw new HandymanException("Failed to execute", e, action);
        }
        log.info(aMarker, "Auth Token Generation Action for {} has been completed", authToken.getName());

    }

    @Override
    public boolean executeIf() throws Exception {
        return authToken.getCondition();
    }
}
