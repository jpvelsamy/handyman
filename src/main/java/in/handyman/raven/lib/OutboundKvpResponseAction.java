package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.OutboundKvpResponse;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

import in.handyman.raven.lib.model.outbound.AlchemyKvpInputEntity;
import in.handyman.raven.lib.model.outbound.AlchemyKvpOutputEntity;
import in.handyman.raven.lib.model.outbound.OutboundKvpConsumerProcess;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
    actionName = "OutboundKvpResponse"
)
public class OutboundKvpResponseAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private final OutboundKvpResponse outboundKvpResponse;

  private final Marker aMarker;

  public OutboundKvpResponseAction(final ActionExecutionAudit action, final Logger log,
      final Object outboundKvpResponse) {
    this.outboundKvpResponse = (OutboundKvpResponse) outboundKvpResponse;
    this.action = action;
    this.log = log;
    this.aMarker = MarkerFactory.getMarker(" OutboundKvpResponse:"+this.outboundKvpResponse.getName());
  }

  @Override
  public void execute() throws Exception {


    try {
      log.info(aMarker, "alchemy kvp response Action has been started {}",outboundKvpResponse.getName());

      final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(outboundKvpResponse.getResourceConn());
      jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
      log.info(aMarker, "alchemy table response Action output table {}",outboundKvpResponse.getResultTable());
      //5. build insert prepare statement with output table columns
      final String insertQuery = "INSERT INTO " +outboundKvpResponse.getResultTable()+
              "(process_id,group_Id,alchemy_origin_id,pipeline_origin_id,kvp_response, tenant_id,file_name,root_pipeline_id,status,stage,message) " +
              " VALUES(?,?,?,?,?,?,?,?,?,?,?)";

      log.info(aMarker, "alchemy kvp Insert query {}", insertQuery);

      //3. initiate copro processor and copro urls
      final List<URL> urls = Optional.ofNullable(action.getContext().get("alchemy.outbound.kvp.url")).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
        try {
          return new URL(s1);
        } catch (MalformedURLException e) {
          log.error("Error in processing the URL ", e);
          throw new HandymanException("Error in processing the URL", e, action);
        }
      }).collect(Collectors.toList())).orElse(Collections.emptyList());
      log.info(aMarker, "alchemy kvp copro urls {}", urls);

      final CoproProcessor<AlchemyKvpInputEntity, AlchemyKvpOutputEntity> coproProcessor =
              new CoproProcessor<>(new LinkedBlockingQueue<>(),
                      AlchemyKvpOutputEntity.class,
                      AlchemyKvpInputEntity.class,
                      jdbi, log,
                      new AlchemyKvpInputEntity(), urls, action);

      log.info(aMarker, "alchemy kvp copro coproProcessor initialization  {}", coproProcessor);

      //4. call the method start producer from coproprocessor
      coproProcessor.startProducer(outboundKvpResponse.getQuerySet(), Integer.valueOf(action.getContext().get("read.batch.size")));
      log.info(aMarker, "product outbound copro coproProcessor startProducer called read batch size {}",action.getContext().get("read.batch.size"));
      Thread.sleep(1000);
      coproProcessor.startConsumer(insertQuery, Integer.valueOf(action.getContext().get("alchemy.kvp.consumer.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")), new OutboundKvpConsumerProcess(log,aMarker,action,this));
      log.info(aMarker, "product outbound coproProcessor startConsumer called consumer count {} write batch count {} ",Integer.valueOf(action.getContext().get("alchemy.kvp.consumer.API.count")),Integer.valueOf(action.getContext().get("write.batch.size")));


    }catch(Exception ex){
      log.error(aMarker,"error in execute method for alchemy response  ",ex);
      throw new HandymanException("error in execute method for alchemy response", ex, action);
    }

  }

  @Override
  public boolean executeIf() throws Exception {
    return outboundKvpResponse.getCondition();
  }
}
