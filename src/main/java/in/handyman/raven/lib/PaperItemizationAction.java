package in.handyman.raven.lib;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.PaperItemization;
import in.handyman.raven.util.InstanceUtil;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.Map;


/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "PaperItemization"
)
public class PaperItemizationAction implements IActionExecution {
    private static final MediaType MediaTypeJSON = MediaType
            .parse("application/json; charset=utf-8");
    private final ActionExecutionAudit action;
    private final Logger log;
    private final PaperItemization paperItemization;
    private final Marker aMarker;
    private final ObjectMapper mapper = new ObjectMapper();
    private final String URI;


    public PaperItemizationAction(final ActionExecutionAudit action, final Logger log,
                                  final Object paperItemization) {
        this.paperItemization = (PaperItemization) paperItemization;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" PaperItemization:" + this.paperItemization.getName());
        this.URI = action.getContext().get("copro.paper-itemizer.url");
    }

    @Override
    public void execute() throws Exception {
        final OkHttpClient httpclient = InstanceUtil.createOkHttpClient();
        // convert the book to JSON by Jackson

        final ObjectNode objectNode = mapper.createObjectNode();

        objectNode.put("inputFilePath", paperItemization.getFilePath());
        objectNode.put("outputDir", paperItemization.getOutputDir());
        log.info(aMarker, " input variables id : {}, name : {}", action.getActionId(), paperItemization.getName());
        // build a request
        Request request = new Request.Builder().url(URI)
                .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();
        log.debug(aMarker, "Request has been build with the parameters \n URI : {} \n Input-File-Path : {} \n Output-Directory : {}", URI, paperItemization.getFilePath(), paperItemization.getOutputDir());

        try (Response response = httpclient.newCall(request).execute()) {
            String responseBody = response.body().string();
            log.info(aMarker, "The response received successfully for Asset ID and Attribution List {}", responseBody);
            String name = paperItemization.getName() + "-Paper-itemized-response";
            if (response.isSuccessful()) {
                log.info(aMarker, "Paper Itemization Action has completed its execution");
                Map<String, String> responseMap = mapper.readValue(responseBody, new TypeReference<>() {
                });
                responseMap.forEach((s, s2) -> action.getContext().put(String.format("%s.%s", paperItemization.getName(), s), s2));
                action.getContext().put(name.concat(".error"), "false");
                log.info(aMarker, "The Successful Response  {} {}", name, responseBody);
            } else {
                log.info(aMarker, "Paper Itemization has failed with bad response");
                action.getContext().put(name.concat(".error"), "true");
                action.getContext().put(name.concat(".errorMessage"), responseBody);
                log.info(aMarker, "The Failure Response  {} {}", name, responseBody);
            }
        } catch (Exception e) {
            log.info(aMarker, "The Exception occurred ", e);
            throw new HandymanException("Failed to execute", e);
        }

    }


    @Override
    public boolean executeIf() throws Exception {
        return paperItemization.getCondition();
    }
}
