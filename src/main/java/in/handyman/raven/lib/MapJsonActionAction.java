package in.handyman.raven.lib;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.MapJson;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.Map;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "MapJson"
)
public class MapJsonActionAction implements IActionExecution {

    private final ActionExecutionAudit actionExecutionAudit;
    private final Logger log;
    private final MapJson mapJson;
    private final Marker aMarker;
    private final ObjectMapper objectMapper = new ObjectMapper();

    public MapJsonActionAction(final ActionExecutionAudit actionExecutionAudit, final Logger log, final Object mapJson) {
        this.mapJson = (MapJson) mapJson;
        this.actionExecutionAudit = actionExecutionAudit;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" MapJson:" + this.mapJson.getName());
    }

    @Override
    public void execute() throws Exception {

        final JsonNode value = objectMapper.readTree(this.actionExecutionAudit.getContext().getOrDefault(mapJson.getValue(), "{}"));
        if (value != null) {
            actionExecutionAudit.getContext().get(value.toString());
            if (!value.isArray()) {
                final Map<String, String> stringStringMap = objectMapper.readValue(value.toString(), new TypeReference<Map<String, String>>() {
                });
                final Map<String, String> stringMap = stringStringMap.entrySet().stream().collect(Collectors
                        .toMap(stringStringEntry -> mapJson.getName() + "." + stringStringEntry.getKey(),
                                Map.Entry::getValue, (p, q) -> p));
                actionExecutionAudit.getContext().putAll(stringMap);
            }
        }

    }

    @Override
    public boolean executeIf() throws Exception {
        return mapJson.getCondition();
    }
}
