package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.adapters.DateAdapter;
import in.handyman.raven.lib.interfaces.AdapterInterface;
import in.handyman.raven.lib.model.Datevalidator;
import in.handyman.raven.lib.model.Validator;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "Datevalidator"
)
public class DatevalidatorAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final Datevalidator datevalidator;

    private final Marker aMarker;

    public DatevalidatorAction(final ActionExecutionAudit action, final Logger log,
                               final Object datevalidator) {
        this.datevalidator = (Datevalidator) datevalidator;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" Datevalidator:" + this.datevalidator.getName());
    }

    public static int getDateScore(Validator adapter) {
        try {
            AdapterInterface dobValidatorAdapter = new DateAdapter();
            int comparableYear = Integer.parseInt(adapter.getComparableChar());
            String[] dateFormats = adapter.getAllowedSpecialChar().split(",");
            boolean dobValidator = dobValidatorAdapter.getDateValidationModel(adapter.getInputValue(), comparableYear, dateFormats);
            return dobValidator ? adapter.getThreshold() : 0;
        } catch (Exception ex) {
            throw new HandymanException("Failed to execute", ex);
        }
    }

    @Override
    public void execute() throws Exception {
        try {
            log.info(aMarker, "<-------Date Validator Action for {} has been started------->" + datevalidator.getName());

            AdapterInterface dobValidatorAdapter = new DateAdapter();
            int comparableYear = Integer.parseInt(datevalidator.getComparableDate());
            String[] dateFormats = datevalidator.getAllowedDateFormats().split(",");

            boolean dobValidator = dobValidatorAdapter.getDateValidationModel(datevalidator.getInputValue(), comparableYear, dateFormats);
            int confidenceScore = dobValidator ? Integer.parseInt(datevalidator.getThresholdValue()) : 0;
            action.getContext().put("validator.score", String.valueOf(confidenceScore));
            log.info(aMarker, "<-------Date Validator Action for {} has been completed------->" + datevalidator.getName());

        } catch (Exception ex) {
            action.getContext().put(datevalidator.getName().concat(".error"), "true");
            log.info(aMarker, "The Exception occurred ", ex);
            throw new HandymanException("Failed to execute", ex);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return datevalidator.getCondition();
    }
}
