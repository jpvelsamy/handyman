package in.handyman.raven.lib;

import com.zaxxer.hikari.HikariDataSource;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.ExportCsv;
import in.handyman.raven.util.ExceptionUtil;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;
import java.util.Optional;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = ExportCsvAction.EXPORT_CSV
)
public class ExportCsvAction implements IActionExecution {

    protected static final String EXPORT_CSV = "ExportCsv";

    private final ActionExecutionAudit actionExecutionAudit;

    private final Logger log;

    private final ExportCsv exportCsv;

    private final Marker aMarker;

    public ExportCsvAction(final ActionExecutionAudit actionExecutionAudit, final Logger log, final Object exportCsv) {
        this.exportCsv = (ExportCsv) exportCsv;
        this.actionExecutionAudit = actionExecutionAudit;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" ExportCsv:" + this.exportCsv.getName());
    }


    @Override
    public void execute() throws Exception {
//        var dbSrc = exportCsv.getSource();
//        var executionSource = exportCsv.getExecutionSource();
//        var location = exportCsv.getTargetLocation();
//        var execStmt = StringEscapeUtils.unescapeJava(exportCsv.getStmt());
//        log.info(aMarker, "Starting the execution with id {} dbSrc {} execStmt {} location {} executionSource {}", actionExecutionAudit.getActionId(), dbSrc, execStmt, location, executionSource);
//        var sql = new HashMap<String, String>();
//        if (dbSrc != null) {
//            final HikariDataSource hikariDataSource = ResourceAccess.rdbmsConn(dbSrc);
//            log.info(aMarker, "Created a hikariDataSource for rdbms connection src {}", dbSrc);
//            try (var con = hikariDataSource.getConnection()) {
//                con.setAutoCommit(false);
//                try (var stmt = con.createStatement()) {
//                    log.info(aMarker, "Executing sql statement {}", execStmt);
//                    var result = stmt.executeQuery(execStmt);
//                    while (result.next()) {
//                        sql.put(result.getString(1), result.getString(2));
//                    }
//                }
//                con.commit();
//            } catch (SQLException ex) {
//                log.error(aMarker, "Stopping execution, General Error executing sql for {} with for campaign {}", execStmt, ex);
//                log.info(aMarker, execStmt + ".exception", ExceptionUtil.toString(ex));
//                throw new HandymanException("Process failed", ex);
//            }
//
//        }
//        if (!sql.isEmpty()) {
//            getSqlExecution(sql, executionSource, location);
//        } else if (execStmt != null) {
//            getSqlExecution(Collections.singletonMap("output_" + UUID.randomUUID(), execStmt), executionSource, location);
//        } else {
//            log.error("Sql stmts are empty");
//        }
    }

    private void getSqlExecution(final Map<String, String> sql, final String executionSource, final String location) {
        final int payloadSize = Optional.ofNullable(exportCsv.getPayloadSize()).map(Integer::valueOf).orElse(10000);
        log.info("payload {}", payloadSize);


        for (var execStmt : sql.entrySet()) {
            final HikariDataSource hikariDataSource = ResourceAccess.rdbmsConn(executionSource);
            log.info(aMarker, "Created a hikariDataSource for rdbms connection src {}", executionSource);
            try (var con = hikariDataSource.getConnection()) {
                try (var stmt = con.createStatement()) {
                    log.info(aMarker, "Executing sql statement {}", execStmt);
                    var result = stmt.executeQuery(execStmt.getValue());
                    result.setFetchSize(payloadSize);
                    performWriteCsv(result, location + execStmt.getKey() + ".csv");
                }
            } catch (SQLException ex) {
                log.error(aMarker, "Stopping execution, General Error executing sql for {} with for campaign {}", execStmt, ex);
                log.info(aMarker, execStmt.getValue() + ".exception", ExceptionUtil.toString(ex));
                throw new HandymanException("Process failed", ex);
            }
        }

    }

    private void performWriteCsv(final ResultSet resultSet, final String fileName) {
        var file = new File(fileName);
        if (file.getParentFile().exists()) {
            log.info(aMarker, "Filename {} has been built", fileName);
//            try (var writer = new CSVWriter(new FileWriter(fileName))) {
//                var resultService = new ResultSetHelperService();
//                resultService.setDateFormat("yyyy-MM-dd");
//                resultService.setDateTimeFormat("yyyy-MM-dd HH:mm:ss");
//                writer.setResultService(resultService);
//
//                writer.writeAll(resultSet, true);
//            } catch (IOException | SQLException ex) {
//                throw new HandymanException(ex.toString());
//            }
        } else {
            throw new HandymanException("Directory not found");
        }

    }

    @Override
    public boolean executeIf() throws Exception {
        return exportCsv.getCondition();
    }
}
