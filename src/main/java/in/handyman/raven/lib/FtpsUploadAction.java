package in.handyman.raven.lib;

import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.FtpsUpload;
import org.apache.commons.net.PrintCommandListener;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPReply;
import org.apache.commons.net.ftp.FTPSClient;
import org.apache.commons.net.util.TrustManagerUtils;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "FtpsUpload"
)
public class FtpsUploadAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final FtpsUpload ftpsUpload;

    private final Marker aMarker;

    public FtpsUploadAction(final ActionExecutionAudit action, final Logger log,
                            final Object ftpsUpload) {
        this.ftpsUpload = (FtpsUpload) ftpsUpload;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" FtpsUpload:" + this.ftpsUpload.getName());
    }

    @Override
    public void execute() throws Exception {
        final String remoteHost = ftpsUpload.getHost();
        final String userName = ftpsUpload.getUserName();
        final String password = ftpsUpload.getPassword();
        final int remotePort = Integer.parseInt(ftpsUpload.getPort());
        final int sessionTimeout = Integer.parseInt(ftpsUpload.getSessionTimeOut());
        final String destDir = ftpsUpload.getDestDir();
        final String remoteFile = ftpsUpload.getSourceFile();
        final String check = ftpsUpload.getUploadCheck();
        if (Boolean.parseBoolean(check)) {
            log.info(aMarker, "Got the sftp details for the host {} and user {}", remoteHost, userName);
            FTPSClient ftpClient = new FTPSClient();
            try {
                ftpClient.setEndpointCheckingEnabled(false);
                ftpClient.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out)));
                int reply;
                ftpClient.setConnectTimeout(sessionTimeout);
                ftpClient.connect(remoteHost, remotePort);
                log.info(aMarker, "FTP URL is: {} ", ftpClient.getDefaultPort());
                reply = ftpClient.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftpClient.disconnect();
                    log.error("Exception in connecting to FTP Server");
                }
                ftpClient.login(userName, password);
                ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
                ftpClient.enterLocalPassiveMode();
                ftpClient.setUseEPSVwithIPv4(true);
                ftpClient.execPBSZ(0);
                ftpClient.execPROT("P");
                System.setProperty("https.protocols", "TLSv1,TLSv1.1,TLSv1.2");
                ftpClient.setTrustManager(TrustManagerUtils.getAcceptAllTrustManager());
                ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
                log.info(aMarker, "Remote system is  {}", (Object) ftpClient.getEnabledCipherSuites());
                log.info(aMarker, "SSL: {}", ftpClient.getEnableSessionCreation());
                log.info(aMarker, "Remote system is {} ", ftpClient.getSystemType());
                String workingDirectory = ftpClient.printWorkingDirectory();
                log.info(aMarker, "Current directory is {}", workingDirectory);
                uploadDirectory(ftpClient, destDir, remoteFile, "");
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (ftpClient.isConnected()) {
                    ftpClient.logout();
                    ftpClient.disconnect();
                }
            }
        } else
            log.info(aMarker, "Upload flag is set to {}", check);


    }

    public void uploadDirectory(FTPClient ftpClient, String remoteDirPath, String localParentDir, String remoteParentDir) throws IOException {
        log.info(aMarker, "Listing directory {} ", localParentDir);
        File localDir = new File(localParentDir);
        File[] subFiles = localDir.isFile() ? new File[]{localDir} : localDir.listFiles();
        if (subFiles != null) {
            for (File item : subFiles) {
                String remoteFilePath = remoteDirPath + File.separator + remoteParentDir + File.separator + item.getName();
                if (remoteParentDir.equals("")) {
                    remoteFilePath = remoteDirPath + File.separator + item.getName();
                }
                if (item.isFile()) {
                    singleFileUploadProcessing(ftpClient, item, remoteFilePath);
                } else {
                    directoryUploadProcessing(ftpClient, remoteDirPath, remoteParentDir, item, remoteFilePath);
                }
            }
        }
    }

    private void directoryUploadProcessing(FTPClient ftpClient, String remoteDirPath, String remoteParentDir, File item, String remoteFilePath) throws IOException {
        String localParentDir;
        boolean created = ftpClient.makeDirectory(remoteFilePath);
        if (created) {
            log.info(aMarker, "Created the directory: {} ", remoteFilePath);
        } else {
            log.info(aMarker, "Couldn't create the directory: {} ", remoteFilePath);
        }
        // upload the subdirectory
        String parent = remoteParentDir + File.separator + item.getName();
        if (remoteParentDir.equals("")) {
            parent = item.getName();
        }
        localParentDir = item.getAbsolutePath();
        uploadDirectory(ftpClient, remoteDirPath, localParentDir, parent);
    }

    private void singleFileUploadProcessing(FTPClient ftpClient, File item, String remoteFilePath) throws IOException {
        // upload the file
        String localFilePath = item.getAbsolutePath();
        log.info(aMarker, "About to upload the file: {} ", localFilePath);
        uploadSingleFile(ftpClient, localFilePath, remoteFilePath);
    }

    public void uploadSingleFile(FTPClient ftpClient, String localFilePath, String remoteFilePath) throws IOException {
        File localFile = new File(localFilePath);
        try (InputStream inputStream = new FileInputStream(localFile)) {
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
            boolean uploaded = ftpClient.storeFile(remoteFilePath, inputStream);
            if (uploaded) {
                log.info(aMarker, "Uploaded a file to: {}", remoteFilePath);
            } else {
                log.info(aMarker, "COULD NOT upload the file: {} ", localFilePath);
            }
        }
    }


    @Override
    public boolean executeIf() throws Exception {
        return ftpsUpload.getCondition();
    }
}
