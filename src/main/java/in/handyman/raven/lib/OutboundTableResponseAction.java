package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.OutboundTableResponse;

import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

import in.handyman.raven.lib.model.outbound.AlchemyKvpInputEntity;
import in.handyman.raven.lib.model.outbound.AlchemyKvpOutputEntity;
import in.handyman.raven.lib.model.outbound.OutboundKvpConsumerProcess;
import in.handyman.raven.lib.model.outbound.table.AlchemyTableInputEntity;
import in.handyman.raven.lib.model.outbound.table.AlchemyTableOutputEntity;
import in.handyman.raven.lib.model.outbound.table.OutboundTableConsumerProcess;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "OutboundTableResponse"
)
public class OutboundTableResponseAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final OutboundTableResponse outboundTableResponse;

    private final Marker aMarker;

    public OutboundTableResponseAction(final ActionExecutionAudit action, final Logger log,
                                       final Object outboundTableResponse) {
        this.outboundTableResponse = (OutboundTableResponse) outboundTableResponse;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" OutboundTableResponse:" + this.outboundTableResponse.getName());
    }

    @Override
    public void execute() throws Exception {


        try {
            log.info(aMarker, "alchemy table response Action has been started {}", outboundTableResponse.getName());

            final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(outboundTableResponse.getResourceConn());
            jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
            log.info(aMarker, "alchemy table response Action output table {}", outboundTableResponse.getResultTable());
            //5. build insert prepare statement with output table columns
            final String insertQuery = "INSERT INTO " + outboundTableResponse.getResultTable() +
                    "(process_id,group_id,alchemy_origin_id,pipeline_origin_id,table_response, tenant_id,root_pipeline_id,status,stage,message,paper_no) " +
                    " VALUES(?,?,?,?,?,?,?,?,?,?,?)";

            log.info(aMarker, "alchemy table Insert query {}", insertQuery);

            //3. initiate copro processor and copro urls
            final List<URL> urls = Optional.ofNullable(action.getContext().get("alchemy.outbound.table.url")).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
                try {
                    return new URL(s1);
                } catch (MalformedURLException e) {
                    log.error("Error in processing the URL ", e);
                    throw new HandymanException("Error in processing the URL", e, action);
                }
            }).collect(Collectors.toList())).orElse(Collections.emptyList());
            log.info(aMarker, "alchemy table copro urls {}", urls);

            final CoproProcessor<AlchemyTableInputEntity, AlchemyTableOutputEntity> coproProcessor =
                    new CoproProcessor<>(new LinkedBlockingQueue<>(),
                            AlchemyTableOutputEntity.class,
                            AlchemyTableInputEntity.class,
                            jdbi, log,
                            new AlchemyTableInputEntity(), urls, action);

            log.info(aMarker, "alchemy table copro coproProcessor initialization  {}", coproProcessor);

            //4. call the method start producer from coproprocessor
            String readBatchSize = action.getContext().get("read.batch.size");
            coproProcessor.startProducer(outboundTableResponse.getQuerySet(), Integer.valueOf(readBatchSize));
            log.info(aMarker, "product outbound copro coproProcessor startProducer called read batch size {}", readBatchSize);
            Thread.sleep(1000);
            coproProcessor.startConsumer(insertQuery, Integer.valueOf(action.getContext().get("alchemy.table.consumer.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")), new OutboundTableConsumerProcess(log, aMarker, action, this));
            log.info(aMarker, "product outbound coproProcessor startConsumer called consumer count {} write batch count {} ", Integer.valueOf(action.getContext().get("alchemy.table.consumer.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")));


        } catch (Exception ex) {
            log.error(aMarker, "error in execute method for alchemy response  ", ex);
            throw new HandymanException("error in execute method for alchemy response", ex, action);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return outboundTableResponse.getCondition();
    }
}
