package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lambda.doa.audit.ExecutionGroup;
import in.handyman.raven.lambda.process.LambdaEngine;
import in.handyman.raven.lib.model.Multitude;
import in.handyman.raven.util.ExceptionUtil;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = MultitudeAction.MULTITUDE
)
public class MultitudeAction implements IActionExecution {

    protected static final String MULTITUDE = "Multitude";
    private final ActionExecutionAudit actionExecutionAudit;
    private final Logger log;
    private final Multitude multitude;
    private final Marker aMarker;

    public MultitudeAction(final ActionExecutionAudit actionExecutionAudit, final Logger log, final Object multitude) {
        this.multitude = (Multitude) multitude;
        this.actionExecutionAudit = actionExecutionAudit;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(MULTITUDE);
    }

    @Override
    public void execute() throws Exception {
        log.info(aMarker, "given {}", multitude);
        Optional.ofNullable(multitude.getActions()).filter(x -> !x.isEmpty())
                .ifPresent(actionContexts -> {

                    final boolean isParallel = Optional.ofNullable(multitude.getOn()).filter(s -> Objects.equals("PARALLEL", s)).isPresent();
                    final int threadCount = Optional.ofNullable(multitude.getWriteThreadCount()).map(Integer::parseInt).orElse(0);
                    log.info(aMarker, "Multitude has been initialized in a {} mode with thread count of {} and countdown ", isParallel, threadCount);
                    final Set<ActionCallable> collect = actionContexts.stream().map(actionContext -> {
                        var vAction = ActionExecutionAudit.builder()
                                .pipelineId(actionExecutionAudit.getPipelineId())
                                .executionGroupId(ExecutionGroup.ACTION.getId())
                                .actionName(multitude.getName())
                                .build();
                        vAction.setContext(actionExecutionAudit.getContext());
                        LambdaEngine.toAction(vAction, actionExecutionAudit);
                        return new ActionCallable(actionContext, vAction, null);
                    }).collect(Collectors.toSet());
                    var countDown = new CountDownLatch(actionContexts.size());
                    try {
                        if (isParallel) {
                            log.info(aMarker, "Execution has been started in a Parallel with thread count of {}", threadCount);
                            var executor = threadCount != 0 ? Executors.newFixedThreadPool(threadCount) : Executors.newWorkStealingPool();
                            collect.forEach(actionCallable -> {
                                executor.submit(() -> {
                                    try {
                                        actionCallable.run();
                                    } catch (Exception e) {
                                        throw new HandymanException("Failed to execute", e, actionExecutionAudit);
                                    } finally {
                                        countDown.countDown();
                                    }
                                });
                            });
                            log.info(aMarker, "Completed Execution of multitude");
                        } else {
                            log.info(aMarker, "Execution started in a sequential manner");
                            collect.forEach(ActionCallable::run);
                            log.info(aMarker, "Completed execution of multitude");
                        }
                    } catch (Exception e) {
                        log.error(aMarker, "Error in execution in parallel thread {}", ExceptionUtil.toString(e));
                        throw new HandymanException("Failed to execute", e, actionExecutionAudit);
                    } finally {
                        try {
                            countDown.await();
                        } catch (InterruptedException e) {
                            log.error("Executors", e);
                        }
                    }


                });

    }

    @Override
    public boolean executeIf() throws Exception {
        return multitude.getCondition();
    }
}
