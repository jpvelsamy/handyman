package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.TriageAttribution;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.Objects;
import java.util.concurrent.TimeUnit;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "TriageAttribution"
)
public class TriageAttributionAction implements IActionExecution {
    private static final MediaType MediaTypeJSON = MediaType
            .parse("application/json; charset=utf-8");
    private final ActionExecutionAudit action;
    private final Logger log;
    private final TriageAttribution triageAttribution;
    private final Marker aMarker;
    private final String URI;
    private final ObjectMapper mapper = new ObjectMapper();

    public TriageAttributionAction(final ActionExecutionAudit action, final Logger log,
                                   final Object triageAttribution) {
        this.triageAttribution = (TriageAttribution) triageAttribution;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" TriageAttribution: " + this.triageAttribution.getName());
        this.URI = action.getContext().get("copro.triage.attribution.url");
    }

    @Override
    public void execute() throws Exception {

        final OkHttpClient httpclient = new OkHttpClient.Builder()
                .connectTimeout(10, TimeUnit.MINUTES)
                .writeTimeout(10, TimeUnit.MINUTES)
                .readTimeout(10, TimeUnit.MINUTES)
                .build();

        final ObjectNode objectNode = mapper.createObjectNode();


        objectNode.put("inputFilePath", triageAttribution.getInputFilePath());
        objectNode.put("labelledClassifierModelFilePath", triageAttribution.getLabelledClassifierModelFilePath());
        objectNode.put("handwrittenClassifierModelFilePath", triageAttribution.getHandwrittenClassifierModelFilePath());
        objectNode.put("checkboxClassifierModelFilePath", triageAttribution.getCheckboxClassifierModelFilePath());
        objectNode.put("synonyms", mapper.readTree(triageAttribution.getSynonyms()));
        objectNode.put("labelledClassifierLabels", mapper.readTree(triageAttribution.getLabelledClassifierLabels()));
        objectNode.put("viltConfigLabel", triageAttribution.getViltConfigLabel());
        objectNode.put("isViltCocoOverride", triageAttribution.getIsViltCocoOverride());
        objectNode.put("viltCocoThreshold", triageAttribution.getViltCocoThreshold());
        objectNode.put("outputDir", triageAttribution.getOutputDir());
        objectNode.put("vggImageWidth", triageAttribution.getVggImageWidth());
        objectNode.put("vggImageHeight", triageAttribution.getVggImageHeight());
        objectNode.set("viltCocoLabels", mapper.readTree(triageAttribution.getViltCocoLabels()));

        final Request request = new Request.Builder().url(URI)
                .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();


        try (final Response response = httpclient.newCall(request).execute()) {
            final String responseBody = Objects.requireNonNull(response.body()).string();
            log.debug(aMarker, "Request has been build with the parameters \n URI : {} \n request body : {} \n saved response as {} \n response body {} {} ",
                    URI, objectNode, triageAttribution.getTriageAttributionResponseName(), response.code(), responseBody);
            if (response.isSuccessful()) {
                action.getContext().put(triageAttribution.getTriageAttributionResponseName(), responseBody);
                action.getContext().put(triageAttribution.getTriageAttributionResponseName().concat(".error"), "false");
            } else {
                action.getContext().put(triageAttribution.getTriageAttributionResponseName().concat(".error"), "true");
                action.getContext().put(triageAttribution.getTriageAttributionResponseName().concat(".errorMessage"), responseBody);
            }
        } catch (Exception e) {
            action.getContext().put(triageAttribution.getTriageAttributionResponseName().concat(".error"), "true");
            action.getContext().put(triageAttribution.getTriageAttributionResponseName().concat(".errorMessage"), e.getMessage());
            log.info(aMarker, "The Exception occurred ", e);
            throw new HandymanException("Failed to execute", e);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return triageAttribution.getCondition();
    }
}
