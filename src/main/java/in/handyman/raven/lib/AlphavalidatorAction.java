package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.adapters.AlphaAdapter;
import in.handyman.raven.lib.interfaces.AdapterInterface;
import in.handyman.raven.lib.model.Alphavalidator;
import in.handyman.raven.lib.model.Validator;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "Alphavalidator"
)
public class AlphavalidatorAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final Alphavalidator alphavalidator;

    private final Marker aMarker;

    public AlphavalidatorAction(final ActionExecutionAudit action, final Logger log,
                                final Object alphavalidator) {
        this.alphavalidator = (Alphavalidator) alphavalidator;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" Alphavalidator:" + this.alphavalidator.getName());
    }

    public static int getAlphaScore(Validator adapter) {
        try {
            AdapterInterface alphaAdapter = new AlphaAdapter();
            boolean validator = alphaAdapter.getValidationModel(adapter.getInputValue(), adapter.getAllowedSpecialChar());
            return validator ? adapter.getThreshold() : 0;
        } catch (Exception ex) {
            throw new HandymanException("Failed to execute", ex);
        }
    }

    @Override
    public void execute() throws Exception {
        try {
            log.info(aMarker, "Alpha Count Action for {} has been started" + alphavalidator.getName());
            AdapterInterface alphaAdapter = new AlphaAdapter();
            boolean validator = alphaAdapter.getValidationModel(alphavalidator.getInputValue(), alphavalidator.getAllowedSpecialCharacters());
            int confidenceScore = validator ? Integer.valueOf(alphavalidator.getThresholdValue()) : 0;
            action.getContext().put("validator.score", String.valueOf(confidenceScore));
            log.info(aMarker, "<-------Alpha Count Action for {} has been completed------->" + alphavalidator.getName());
        } catch (Exception ex) {
            action.getContext().put(alphavalidator.getName().concat(".error"), "true");
            log.info(aMarker, "The Exception occurred ", ex);
            throw new HandymanException("Failed to execute", ex);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return alphavalidator.getCondition();
    }
}
