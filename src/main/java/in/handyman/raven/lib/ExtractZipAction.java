package in.handyman.raven.lib;

import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.ExtractZip;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "ExtractZip"
)
public class ExtractZipAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final ExtractZip extractZip;

    private final Marker aMarker;

    public ExtractZipAction(final ActionExecutionAudit action, final Logger log,
                            final Object extractZip) {
        this.extractZip = (ExtractZip) extractZip;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" ExtractZip:" + this.extractZip.getName());
    }

    private static void processDirectory(int bufferSize, ZipFile zip, ZipEntry entry, File destFile) throws IOException {
        BufferedInputStream is = null;
        FileOutputStream fos = null;
        BufferedOutputStream dest = null;
        try {
            is = new BufferedInputStream(zip.getInputStream(entry));
            int currentByte;
            byte[] data = new byte[bufferSize];
            fos = new FileOutputStream(destFile);
            dest = new BufferedOutputStream(fos, bufferSize);
            while ((currentByte = is.read(data, 0, bufferSize)) != -1) {
                dest.write(data, 0, currentByte);
            }
        } catch (Exception e) {
            System.out.println("unable to extract entry:" + entry.getName());
            throw e;
        } finally {
            if (dest != null) {
                dest.close();
            }
            if (fos != null) {
                fos.close();
            }
            if (is != null) {
                is.close();
            }
        }
    }

    @Override
    public void execute() throws Exception {
        final String source = extractZip.getSource();
        final String destFileDir = extractZip.getDestination();

        File destDir = new File(destFileDir);
        File sourceFile = new File(source);
        int buffer = 2048;
        extractZipFile(sourceFile, destDir, buffer);
    }

    public void extractZipFile(File sourceFile, File destDir, int bufferSize) {
        try (ZipFile zip = new ZipFile(sourceFile)) {
            boolean parentDirFlag = destDir.getParentFile().mkdirs();
            if (parentDirFlag)
                log.info(aMarker, "Create parent directory : {}", destDir.getParentFile());
            else
                log.info(aMarker, "Failed to create the parent directory: {}", destDir.getParentFile());
            Enumeration<? extends ZipEntry> zipFileEntries = zip.entries();
            while (zipFileEntries.hasMoreElements()) {
                ZipEntry entry = zipFileEntries.nextElement();
                String currentEntry = entry.getName();
                File destFile = new File(destDir, currentEntry);
                File destinationParent = destFile.getParentFile();
                boolean destinationParentDir = destinationParent.mkdirs();
                if (destinationParentDir)
                    log.info(aMarker, "Create destination directory : {}", destinationParent);
                else
                    log.info(aMarker, "Failed to create the destination directory: {}", destinationParent.mkdirs());

                if (!entry.isDirectory()) {
                    processDirectory(bufferSize, zip, entry, destFile);
                } else {
                    log.info(aMarker, "Created destination directory : {}", destFile.mkdirs());
                }
                if (currentEntry.endsWith(".zip")) {
                    extractZipFile(destFile, destinationParent, bufferSize);
                    if (!destFile.delete()) {
                        log.info(aMarker, "Could not delete zip");
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.error(aMarker, "Failed to successfully unzip {}", sourceFile.getName());
        }
        log.info(aMarker, "Done Unzipping: {}", sourceFile.getName());
    }

    @Override
    public boolean executeIf() throws Exception {
        return extractZip.getCondition();
    }
}
