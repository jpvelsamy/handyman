


package in.handyman.raven.lib;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.CoproProcessor;
import in.handyman.raven.lib.model.MasterdataComparison;
import in.handyman.raven.lib.model.common.*;
import in.handyman.raven.lib.model.triton.TritonInputRequest;
import in.handyman.raven.lib.model.triton.TritonRequest;
import in.handyman.raven.util.ExceptionUtil;
import in.handyman.raven.util.InstanceUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import okhttp3.*;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.argument.Arguments;
import org.jdbi.v3.core.argument.NullArgument;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Timestamp;
import java.sql.Types;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

/**
 /**
 /**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "MasterdataComparison"
)
public class MasterdataComparisonAction implements IActionExecution {
  private final ActionExecutionAudit action;

  private final Logger log;

  private final MasterdataComparison masterdataComparison;
  private String name;

  private String resourceConn;

  private String matchResult;

  private String inputSet;
  private Boolean condition = true;
  final String URI;
  private final Marker aMarker;
  final ObjectMapper MAPPER;
  final OkHttpClient httpclient;
  public static final MediaType MediaTypeJSON = MediaType.parse("application/json; charset=utf-8");

  private final Integer writeBatchSize = 1000;
  private static String httpClientTimeout = new String();


  public MasterdataComparisonAction(final ActionExecutionAudit action, final Logger log,
                                    final Object intellimatch) {
    this.masterdataComparison = (MasterdataComparison) intellimatch;
    this.action = action;
    this.log = log;
    this.URI = action.getContext().get("copro.masterdata-comparison.url");
    this.MAPPER = new ObjectMapper();
    this.httpclient = InstanceUtil.createOkHttpClient();
    this.aMarker = MarkerFactory.getMarker(" Intellimatch:" + this.masterdataComparison.getName());
    this.httpClientTimeout = action.getContext().get("okhttp.client.timeout");
  }


  @Override
  public void execute() throws Exception {
    log.info(aMarker, "master data comparison process for {} has been started" + masterdataComparison.getName());
    try {

      final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(masterdataComparison.getResourceConn());
      jdbi.getConfig(Arguments.class).setUntypedNullArgument(new NullArgument(Types.NULL));
      // build insert prepare statement with output table columns
      final String insertQuery = "INSERT INTO " + masterdataComparison.getMatchResult() +
              " ( origin_id, paper_no,eoc_identifier,created_on, actual_value, extracted_value,intelli_match,status,stage,message, root_pipeline_id,model_name,model_version)" +
              " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ? , ?,?,?);";
      log.info(aMarker, "master data comparison Insert query {}", insertQuery);

      //3. initiate copro processor and copro urls
      final List<URL> urls = Optional.ofNullable(action.getContext().get("copro.masterdata-comparison.url")).map(s -> Arrays.stream(s.split(",")).map(s1 -> {
        try {
          return new URL(s1);
        } catch (MalformedURLException e) {
          log.error("Error in processing the URL ", e);
          throw new HandymanException("Error in processing the URL", e, action);
        }
      }).collect(Collectors.toList())).orElse(Collections.emptyList());
      log.info(aMarker, "master data comparison copro urls {}", urls);

      final CoproProcessor<MasterDataInputTable, MasterDataOutputTable> coproProcessor =
              new CoproProcessor<>(new LinkedBlockingQueue<>(),
                      MasterDataOutputTable.class,
                      MasterDataInputTable.class,
                      jdbi, log,
                      new MasterDataInputTable(), urls, action);
      log.info(aMarker, "master data comparison copro Processor initialization  {}", coproProcessor);

      //4. call the method start producer from coproprocessor
      coproProcessor.startProducer(masterdataComparison.getInputSet(), Integer.valueOf(action.getContext().get("read.batch.size")));
      log.info(aMarker, "master data comparison coproProcessor startProducer called read batch size {}", action.getContext().get("read.batch.size"));
      Thread.sleep(1000);
      coproProcessor.startConsumer(insertQuery, Integer.valueOf(action.getContext().get("consumer.masterdata.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")),
              new MasterdataComparisonProcess(log, aMarker, action));
      log.info(aMarker, "master data comparison coproProcessor startConsumer called consumer count {} write batch count {} ", Integer.valueOf(action.getContext().get("consumer.masterdata.API.count")), Integer.valueOf(action.getContext().get("write.batch.size")));

    } catch (Exception ex) {
      log.error(aMarker, "Error in execute method for Drug Match {} ", ExceptionUtil.toString(ex));
      throw new HandymanException("Error in execute method for Drug Match", ex, action);
    }
    log.info(aMarker, "master data comparison process for {} has been completed", masterdataComparison.getName());
  }

  /**
   * @return 
   * @throws Exception
   */
  @Override
  public boolean executeIf() throws Exception {
    return false;
  }


}