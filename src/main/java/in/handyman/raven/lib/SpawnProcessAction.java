package in.handyman.raven.lib;

import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lambda.process.HRequestResolver;
import in.handyman.raven.lambda.process.LContext;
import in.handyman.raven.lib.model.SpawnProcess;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.concurrent.Executors;

/**
 * Auto Generated By Raven
 */
@ActionExecution(actionName = SpawnProcessAction.SPAWN_PROCESS)
public class SpawnProcessAction implements IActionExecution {
    protected static final String SPAWN_PROCESS = "SpawnProcess";

    private final ActionExecutionAudit actionExecutionAudit;
    private final Logger log;
    private final SpawnProcess spawnProcess;

    private final Marker aMarker;

    public SpawnProcessAction(final ActionExecutionAudit actionExecutionAudit, final Logger log, final Object spawnProcess) {
        this.spawnProcess = (SpawnProcess) spawnProcess;
        this.actionExecutionAudit = actionExecutionAudit;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(SPAWN_PROCESS);
    }

    @Override
    public void execute() throws Exception {
        log.info(aMarker, " id: {}, name: {}", actionExecutionAudit.getActionId(), spawnProcess.getName());
        var executor = Executors.newWorkStealingPool();
        final LContext lContext = LContext.builder()
                .inheritedContext(actionExecutionAudit.getContext())
                .lambdaName(actionExecutionAudit.getLambdaName())
                .parentActionId(actionExecutionAudit.getActionId())
                .parentActionName(actionExecutionAudit.getActionName())
                .relativePath(spawnProcess.getSource())
                .processLoadType(HRequestResolver.LoadType.FILE.name())
                .pipelineName(spawnProcess.getTarget())
                .parentPipelineId(actionExecutionAudit.getPipelineId())
                .parentPipelineName(actionExecutionAudit.getPipelineName())
                .rootPipelineId(actionExecutionAudit.getRootPipelineId())
                .build();
        var processWorker = new LambdaCallable(lContext, null);
        executor.submit(processWorker);
    }

    @Override
    public boolean executeIf() throws Exception {
        return spawnProcess.getCondition();
    }
}
