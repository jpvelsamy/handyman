package in.handyman.raven.lib;

import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.CopyFile;
import org.apache.commons.io.FileUtils;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.io.File;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "CopyFile"
)
public class CopyFileAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final CopyFile copyFile;

    private final Marker aMarker;

    public CopyFileAction(final ActionExecutionAudit action, final Logger log,
                          final Object copyFile) {
        this.copyFile = (CopyFile) copyFile;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" CopyFile:" + this.copyFile.getName());
    }

    @Override
    public void execute() throws Exception {
        String srcLocation = copyFile.getSrcLocation();
        String destLocation = copyFile.getDestLocation();
        String fileName = copyFile.getFileName();
        String extension = copyFile.getExtension();

        var srcFile = new File(srcLocation.concat(fileName + extension));
        var destFile = new File(destLocation.concat(fileName + extension));
        FileUtils.copyFile(srcFile, destFile);
    }

    @Override
    public boolean executeIf() throws Exception {
        return copyFile.getCondition();
    }
}
