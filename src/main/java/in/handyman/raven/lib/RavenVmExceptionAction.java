package in.handyman.raven.lib;

import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.RavenVmException;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "RavenVmException"
)
public class RavenVmExceptionAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final RavenVmException ravenVmException;

    private final Marker aMarker;

    public RavenVmExceptionAction(final ActionExecutionAudit action, final Logger log,
                                  final Object ravenVmException) {
        this.ravenVmException = (RavenVmException) ravenVmException;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" RavenVmException:" + this.ravenVmException.getName());
    }

    @Override
    public void execute() throws Exception {
        log.error(aMarker, ravenVmException.getMessage());
        throw new HandymanException(ravenVmException.getMessage());
    }

    @Override
    public boolean executeIf() throws Exception {
        return ravenVmException.getCondition();
    }
}
