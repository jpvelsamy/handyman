package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.DownloadAsset;
import in.handyman.raven.util.ExceptionUtil;
import in.handyman.raven.util.InstanceUtil;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.Objects;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "DownloadAsset"
)
public class DownloadAssetAction implements IActionExecution {
    private static final MediaType MediaTypeJSON = MediaType
            .parse("application/json; charset=utf-8");
    private final ActionExecutionAudit action;
    private final Logger log;
    private final DownloadAsset downloadAsset;
    private final ObjectMapper mapper = new ObjectMapper();
    private final String URI;

    private final Marker aMarker;

    public DownloadAssetAction(final ActionExecutionAudit action, final Logger log,
                               final Object downloadAsset) {
        this.downloadAsset = (DownloadAsset) downloadAsset;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" DownloadAsset:" + this.downloadAsset.getName());
        this.URI = action.getContext().get("copro.download-file.url");

    }

    @Override
    public void execute() throws Exception {
        log.info(aMarker, "Download Action for {} has been started" , downloadAsset.getName());
        final OkHttpClient httpclient = InstanceUtil.createOkHttpClient();

        // convert the book to JSON by Jackson
        final ObjectNode objectNode = mapper.createObjectNode();
        objectNode.putPOJO("inputFileUri", downloadAsset.getUrl());
        objectNode.put("outputDir", downloadAsset.getLocation());

        // build a request
        Request request = new Request.Builder().url(this.URI)
                .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();
        log.info(aMarker, "The request details: {} ", request);
        String name = downloadAsset.getName();

        try (Response response = httpclient.newCall(request).execute()) {
            String responseBody = Objects.requireNonNull(response.body()).string();
            if (response.isSuccessful()) {
                log.debug(aMarker, responseBody);
                String path = mapper.readTree(responseBody).get("paperPath").asText();
                action.getContext().put(name, path);
                log.info(aMarker, "Successful Response Details {} {}", name, responseBody);
                action.getContext().put(name + ".isSuccessful", String.valueOf(response.isSuccessful()));
            } else {
                log.error(aMarker, "Failure Response Details {} {}", name, responseBody);
                log.error(aMarker, name + ".errorMessage {}", responseBody);
            }
        } catch (Exception e) {
            log.error(aMarker, "The Exception occurred {}", ExceptionUtil.toString(e));
            action.getContext().put(name + ".isSuccessful", "false");
            throw new HandymanException("Failed to execute", e, action);
        }
        log.info(aMarker, "Download Action for {} has been Completed" , downloadAsset.getName());
    }

    @Override
    public boolean executeIf() throws Exception {
        return downloadAsset.getCondition();
    }
}
